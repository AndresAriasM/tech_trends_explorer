# src/s_curve.py
import streamlit as st
import os
import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import time
from datetime import datetime
import re
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from utils.scopus_builder import scopus_equation_interface, parse_scopus_query
from scipy.optimize import curve_fit
import json
import io
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter

# Definir la funci√≥n sigmoidal al nivel global para que est√© disponible en toda la aplicaci√≥n
def sigmoid(x, L, x0, k):
    """
    Funci√≥n sigmoidal de tres par√°metros.
    """
    return L / (1 + np.exp(-k * (x - x0)))

class ScopusPublicationsAnalyzer:
    """
    Clase para conectarse a la API de Scopus, buscar publicaciones acad√©micas y analizarlas por a√±o
    para crear una curva en S.
    """
    
    def __init__(self, api_key=None):
        """
        Inicializa el analizador.
        
        Args:
            api_key: La clave API de Scopus.
        """
        self.api_key = api_key
        self.base_url = "https://api.elsevier.com/content/search/scopus"
        self.headers = {
            "X-ELS-APIKey": api_key,
            "Accept": "application/json"
        }
        self.publications_by_year = {}
        
    def search_publications(self, query, max_results=1000):
        """
        Busca publicaciones en Scopus utilizando una consulta, sin filtros de a√±o.
        
        Args:
            query: Consulta de b√∫squeda en formato de sintaxis de Scopus
            max_results: N√∫mero m√°ximo de resultados a recuperar
            
        Returns:
            Resultados de la b√∫squeda o None si hay error
        """
        # A√±adir filtro espec√≠fico para excluir patentes
        query_papers = f"({query}) AND NOT (DOCTYPE(pt))"
        
        # Mostrar ecuaci√≥n de b√∫squeda
        st.info(f"üìù Ecuaci√≥n de b√∫squeda (Papers): {query_papers}")
        
        # Configurar par√°metros de b√∫squeda
        base_url = "https://api.elsevier.com/content/search/scopus"
        headers = {
            "X-ELS-APIKey": self.api_key,
            "Accept": "application/json"
        }
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Intentar la b√∫squeda
        try:
            # Verificar si la b√∫squeda funciona
            status_text.text("üîç Verificando si la b√∫squeda funciona...")
            
            response = requests.get(
                base_url,
                headers=headers,
                params={"query": query_papers, "count": 1}
            )
            
            if response.status_code != 200:
                st.error(f"‚ùå Error en la b√∫squeda de papers: {response.status_code}")
                st.code(response.text)
                
                # Probar con una versi√≥n simplificada de la consulta para diagnosticar
                status_text.text("üîç Probando con b√∫squeda simplificada...")
                simple_query = 'TITLE("banana") AND TITLE("flour") AND NOT (DOCTYPE(pt))'
                
                st.info(f"üìù Intentando con: {simple_query}")
                
                response = requests.get(
                    base_url,
                    headers=headers,
                    params={"query": simple_query, "count": 1}
                )
                
                if response.status_code == 200:
                    st.success("‚úÖ La b√∫squeda simplificada funciona")
                    st.info("‚ùó El problema est√° en la complejidad de la ecuaci√≥n original")
                    
                    # Usar la ecuaci√≥n simplificada
                    query_papers = simple_query
                    st.info(f"üìù Nueva ecuaci√≥n de b√∫squeda: {query_papers}")
                else:
                    st.error(f"‚ùå Error tambi√©n con b√∫squeda simplificada: {response.status_code}")
                    st.code(response.text)
                    return None
            
            # Realizar la b√∫squeda con la ecuaci√≥n (original o simplificada)
            status_text.text("üîç Obteniendo resultados completos...")
            
            response = requests.get(
                base_url,
                headers=headers,
                params={"query": query_papers, "count": 25, "sort": "coverDate"}
            )
            
            if response.status_code == 200:
                data = response.json()
                total_results = int(data["search-results"]["opensearch:totalResults"])
                st.success(f"‚úÖ B√∫squeda exitosa: {total_results} papers encontrados")
                
                if total_results == 0:
                    status_text.text("‚ùå No se encontraron papers con esta ecuaci√≥n")
                    return None
                
                # Recopilar todos los resultados
                all_results = []
                params = {"query": query_papers, "count": 25, "start": 0, "sort": "coverDate"}
                
                while params["start"] < min(total_results, max_results):
                    response = requests.get(base_url, headers=headers, params=params)
                    
                    if response.status_code == 200:
                        data = response.json()
                        entries = data["search-results"].get("entry", [])
                        all_results.extend(entries)
                        
                        # Actualizar progreso
                        progress = min(len(all_results) / min(total_results, max_results), 1.0)
                        progress_bar.progress(progress)
                        status_text.text(f"‚è≥ Recuperados {len(all_results)} de {min(total_results, max_results)} papers ({progress*100:.1f}%)...")
                        
                        params["start"] += params["count"]
                        
                        if params["start"] < min(total_results, max_results):
                            time.sleep(0.5)  # peque√±a pausa entre solicitudes
                    else:
                        st.error(f"‚ùå Error al recuperar p√°gina: {response.status_code}")
                        st.code(response.text)
                        break
                
                # Limpieza y mensaje final
                progress_bar.empty()
                
                if all_results:
                    status_text.text(f"‚úÖ Recuperados {len(all_results)} papers en total")
                    return all_results
                else:
                    status_text.text("‚ùå No se pudieron recuperar papers")
                    return None
            else:
                st.error(f"‚ùå Error en la b√∫squeda: {response.status_code}")
                st.code(response.text)
                return None
        except Exception as e:
            st.error(f"‚ùå Error inesperado en b√∫squeda de papers: {str(e)}")
            import traceback
            st.code(traceback.format_exc())
            return None
        
    def categorize_by_year(self, results):
        """
        Categoriza los resultados de publicaciones por a√±o y completa los a√±os faltantes con ceros.
        
        Args:
            results: Lista de resultados de la b√∫squeda
            
        Returns:
            Diccionario con el recuento por a√±o
        """
        publications_by_year = {}
        
        st.text("üìÖ Categorizando publicaciones por a√±o...")
        
        for entry in results:
            # Intentar extraer el a√±o de diferentes campos
            year = None
            
            # M√©todo 1: Del campo prism:coverDate
            if "prism:coverDate" in entry:
                try:
                    date_str = entry["prism:coverDate"]
                    year = datetime.strptime(date_str, "%Y-%m-%d").year
                except (ValueError, TypeError):
                    pass
            
            # M√©todo 2: Del campo prism:publicationDate
            if not year and "prism:publicationDate" in entry:
                try:
                    date_str = entry["prism:publicationDate"]
                    year = datetime.strptime(date_str, "%Y-%m-%d").year
                except (ValueError, TypeError):
                    pass
                    
            # M√©todo 3: Del texto de la fecha de portada
            if not year and "prism:coverDisplayDate" in entry:
                try:
                    year_str = entry["prism:coverDisplayDate"]
                    # Buscar un a√±o en el texto con regex
                    match = re.search(r'(19|20)\d{2}', year_str)
                    if match:
                        year = int(match.group(0))
                except (ValueError, TypeError, AttributeError):
                    pass
            
            # Si no se pudo determinar el a√±o, continuar con la siguiente entrada
            if not year:
                continue
            
            # Incrementar el contador para este a√±o
            publications_by_year[year] = publications_by_year.get(year, 0) + 1
        
        # Completar a√±os faltantes con ceros
        if publications_by_year:
            min_year = min(publications_by_year.keys())
            max_year = max(publications_by_year.keys())
            
            # Crear rango completo de a√±os
            all_years = list(range(min_year, max_year + 1))
            
            # Completar con ceros los a√±os faltantes
            complete_publications = {year: publications_by_year.get(year, 0) for year in all_years}
            
            # Ordenar por a√±o
            self.publications_by_year = dict(sorted(complete_publications.items()))
        else:
            self.publications_by_year = {}
            
        return self.publications_by_year


class PatentDataManager:
    """
    Clase para gestionar datos de patentes cargados manualmente mediante archivos Excel.
    """
    
    @staticmethod
    def create_template(start_year=1990, end_year=None):
        """
        Crea una plantilla Excel para la carga de datos de patentes por a√±o.
        
        Args:
            start_year: A√±o inicial para la plantilla
            end_year: A√±o final para la plantilla (por defecto es el a√±o actual)
        
        Returns:
            BytesIO: Objeto de bytes con el contenido del archivo Excel
        """
        if end_year is None:
            end_year = datetime.now().year
        
        # Crear workbook y hoja
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Datos de Patentes"
        
        # A√±adir encabezados con estilo
        ws['A1'] = "A√±o"
        ws['B1'] = "N√∫mero de Patentes"
        ws['C1'] = "Notas/Observaciones"
        
        # Aplicar estilos a los encabezados
        for col in ['A', 'B', 'C']:
            cell = ws[f'{col}1']
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="E0E0E0", end_color="E0E0E0", fill_type="solid")
            cell.alignment = Alignment(horizontal='center')
        
        # Ajustar anchos de columna
        ws.column_dimensions['A'].width = 10
        ws.column_dimensions['B'].width = 20
        ws.column_dimensions['C'].width = 30
        
        # A√±adir filas para cada a√±o
        for i, year in enumerate(range(start_year, end_year + 1), start=2):
            ws[f'A{i}'] = year
            ws[f'B{i}'] = 0  # Valor predeterminado
            
            # Aplicar formato num√©rico a la columna de patentes
            ws[f'B{i}'].number_format = '0'
        
        # A√±adir instrucciones en una nueva hoja
        ws_instructions = wb.create_sheet(title="Instrucciones")
        
        instructions = [
            "INSTRUCCIONES PARA COMPLETAR LA PLANTILLA DE PATENTES",
            "",
            "1. Completa la columna 'N√∫mero de Patentes' con la cantidad de patentes por a√±o.",
            "2. Los datos deben ser valores num√©ricos enteros.",
            "3. No elimines ning√∫n a√±o de la lista.",
            "4. Puedes dejar a√±os con valor 0 si no hay datos disponibles.",
            "5. La columna 'Notas/Observaciones' es opcional y puedes usarla para informaci√≥n adicional.",
            "6. Guarda el archivo cuando hayas completado los datos.",
            "7. Sube el archivo en la aplicaci√≥n para analizar los datos de patentes.",
            "",
            "C√ìMO OBTENER LOS DATOS DE PATENTES:",
            "",
            "- Opci√≥n 1: Busca en la pesta√±a 'Patents' de Scopus y anota el n√∫mero de resultados por a√±o.",
            "- Opci√≥n 2: Utiliza otras bases de datos de patentes como PatentScope, Google Patents, o Espacenet.",
            "- Opci√≥n 3: Consulta informes de oficinas de patentes nacionales o internacionales.",
            "",
            "Nota: Para una an√°lisis preciso, aseg√∫rate de utilizar la misma ecuaci√≥n de b√∫squeda o criterios consistentes para todos los a√±os."
        ]
        
        for i, line in enumerate(instructions, start=1):
            ws_instructions[f'A{i}'] = line
        
        # Ajustar ancho de columna en la hoja de instrucciones
        ws_instructions.column_dimensions['A'].width = 100
        
        # Guardar en un objeto de bytes
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        
        return output
    
    @staticmethod
    def load_data(uploaded_file):
        """
        Carga y procesa datos de patentes desde un archivo Excel subido.
        
        Args:
            uploaded_file: Archivo Excel subido mediante st.file_uploader
            
        Returns:
            dict: Diccionario con datos de patentes por a√±o {a√±o: conteo}
        """
        try:
            # Cargar el archivo Excel
            df = pd.read_excel(uploaded_file, sheet_name="Datos de Patentes")
            
            # Verificar que las columnas necesarias existen
            if "A√±o" not in df.columns or "N√∫mero de Patentes" not in df.columns:
                st.error("‚ùå El archivo no tiene el formato esperado. Aseg√∫rate de usar la plantilla proporcionada.")
                return None
            
            # Convertir a diccionario {a√±o: conteo}
            patents_by_year = dict(zip(df["A√±o"], df["N√∫mero de Patentes"]))
            
            # Filtrar a√±os con valores nulos o no num√©ricos
            patents_by_year = {year: int(count) for year, count in patents_by_year.items() 
                              if pd.notna(count) and str(count).replace('.', '', 1).isdigit()}
            
            # Ordenar por a√±o
            patents_by_year = dict(sorted(patents_by_year.items()))
            
            return patents_by_year
            
        except Exception as e:
            st.error(f"‚ùå Error al cargar el archivo: {str(e)}")
            return None


class TechnologyAnalyzer:
    """
    Clase para analizar datos de publicaciones o patentes y generar an√°lisis de curva en S.
    """
    
    @staticmethod
    def analyze_s_curve(yearly_data):
        """
        Realiza un an√°lisis completo de la curva en S con c√°lculos matem√°ticos.
        
        Args:
            yearly_data: Diccionario con conteo por a√±o {a√±o: conteo}
            
        Returns:
            DataFrame con los datos analizados, figura, info de ajuste y par√°metros
        """
        if not yearly_data:
            st.error("No hay datos para analizar")
            return None, None, None, None
        
        # Crear DataFrame base
        df = pd.DataFrame({
            'A√±o': list(yearly_data.keys()),
            'Cantidad': list(yearly_data.values())
        })
        
        # Calcular acumulado
        df['Acumulado'] = df['Cantidad'].cumsum()
        
        # Establecer a√±o como √≠ndice para c√°lculos
        df_analysis = df.copy()
        df_analysis.set_index('A√±o', inplace=True)
        
        # Calcular la tasa de crecimiento anual
        df_analysis['TasaCrecimiento'] = df_analysis['Acumulado'].pct_change() * 100
        
        # A√±adir la segunda derivada al DataFrame
        df_analysis['SegundaDerivada'] = np.gradient(np.gradient(df_analysis['Acumulado']))
        
        # Encontrar los a√±os de puntos de inflexi√≥n exactos
        try:
            puntos_inflexion_exacto = df_analysis[df_analysis['SegundaDerivada'] == 0].index.tolist()
            if not puntos_inflexion_exacto and len(df_analysis) > 0:
                # Si no hay puntos exactos con segunda derivada = 0, encontrar el m√°s cercano
                punto_cercano_idx = np.abs(df_analysis['SegundaDerivada']).idxmin()
                puntos_inflexion_exacto = [punto_cercano_idx]
        except:
            puntos_inflexion_exacto = []
        
        # Preparar datos para el ajuste
        x_data = np.array(df_analysis.index)
        y_data = np.array(df_analysis['Acumulado'])
        
        # Ajustar la curva sigmoidal a los datos
        try:
            # Usar los mismos valores iniciales y par√°metros 
            popt, pcov = curve_fit(
                sigmoid, 
                x_data, 
                y_data, 
                p0=[max(df_analysis['Acumulado']), np.median(df_analysis.index), 0.1], 
                maxfev=5000
            )
            
            # Calcular los puntos de la curva ajustada
            curva_ajustada = sigmoid(x_data, *popt)
            df_analysis['Ajustada'] = curva_ajustada
            
            # Crear una tabla con datos relevantes
            df_parametros = pd.DataFrame({
                'Par√°metro': ['L', 'x0', 'k'],
                'Valor ajustado': popt,
                'Error est√°ndar': np.sqrt(np.diag(pcov)),
                'Valor T': popt/np.sqrt(np.diag(pcov)),
                'Validaci√≥n': ['V√°lido' if abs(valor_t) > 2 else 'No v√°lido' 
                              for valor_t in popt/np.sqrt(np.diag(pcov))]
            })
            
            # C√°lculo de R¬≤
            r_squared = 1 - np.sum((y_data - curva_ajustada)**2) / np.sum((y_data - np.mean(y_data))**2)
            
            # Determinar la fase actual
            ultima_derivada = df_analysis['SegundaDerivada'].iloc[-3:].mean() if len(df_analysis) >= 3 else 0
            
            if ultima_derivada > 0:
                fase = "Fase inicial (crecimiento acelerado)"
                descripcion = "La tecnolog√≠a est√° en su fase temprana con crecimiento acelerado."
            elif ultima_derivada < 0:
                fase = "Fase de madurez (crecimiento desacelerado)"
                descripcion = "La tecnolog√≠a est√° madurando, el crecimiento se est√° desacelerando."
            else:
                fase = "Punto de inflexi√≥n"
                descripcion = "La tecnolog√≠a est√° en el punto de inflexi√≥n entre el crecimiento acelerado y desacelerado."
            
            # Crear figura de Plotly con la curva acumulada y el ajuste
            fig = px.line(
                df_analysis, x=df_analysis.index, y=['Acumulado', 'Ajustada'],
                labels={'value': 'Cantidad Acumulada', 'variable': 'Tipo de Curva', 'A√±o': 'A√±o'},
                title='Curva S - Acumulado por A√±o',
                color_discrete_map={'Acumulado': 'blue', 'Ajustada': 'red'},
                markers=True
            )
            
            # A√±adir puntos de inflexi√≥n si existen
            for punto in puntos_inflexion_exacto:
                fig.add_trace(
                    go.Scatter(
                        x=[punto],
                        y=[df_analysis.loc[punto, 'Acumulado']],
                        mode='markers',
                        name=f'Punto de inflexi√≥n ({punto})',
                        marker=dict(color='red', size=15, symbol='star')
                    )
                )
            
            # Mejorar aspecto visual
            fig.update_layout(
                width=600,
                height=600,
                legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),
                plot_bgcolor='white',
                xaxis=dict(showgrid=True, gridcolor='lightgray'),
                yaxis=dict(showgrid=True, gridcolor='lightgray'),
                annotations=[
                    dict(
                        x=0.5,
                        y=-0.15,
                        xref='paper',
                        yref='paper',
                        text=f'R¬≤ = {r_squared:.4f} | Fase: {fase}',
                        showarrow=False
                    )
                ]
            )
            
            # Informaci√≥n de ajuste
            ajuste_info = {
                'R2': r_squared,
                'L': popt[0],
                'x0': popt[1],
                'k': popt[2],
                'Fase': fase,
                'Descripci√≥n': descripcion,
                'Puntos_inflexion': puntos_inflexion_exacto
            }
            
            # Restaurar el √≠ndice para el DataFrame original
            df_analysis = df_analysis.reset_index()
            
            return df_analysis, fig, ajuste_info, df_parametros
            
        except Exception as e:
            st.error(f"Error en el ajuste de curva: {str(e)}")
            # Restaurar el √≠ndice
            df_analysis = df_analysis.reset_index()
            return df_analysis, None, None, None
    
    @staticmethod
    def display_data_table(yearly_data, title="Datos por A√±o"):
        """
        Muestra una tabla con los datos por a√±o.
        
        Args:
            yearly_data: Diccionario {a√±o: conteo}
            title: T√≠tulo de la tabla
            
        Returns:
            DataFrame con los datos
        """
        if not yearly_data:
            st.error("No hay datos para mostrar")
            return None
        
        df = pd.DataFrame({
            'A√±o': list(yearly_data.keys()),
            'Cantidad': list(yearly_data.values())
        })
        
        # Calcular acumulado
        df['Acumulado'] = df['Cantidad'].cumsum()
        
        # Formatear a√±os como enteros sin comas
        df['A√±o'] = df['A√±o'].astype(int)
        
        # Mostrar tabla
        st.write(f"### üìã {title}")
        
        # Usar el componente nativo de Streamlit para tablas con estilo
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "A√±o": st.column_config.NumberColumn(format="%d"),
                "Cantidad": st.column_config.NumberColumn(format="%d"),
                "Acumulado": st.column_config.NumberColumn(format="%d")
            }
        )
        
        return df
    
    @staticmethod
    def display_s_curve_analysis(analysis_df, analysis_fig, ajuste_info, parametros, title="An√°lisis de Curva en S"):
        """
        Muestra el an√°lisis completo de la curva en S.
        
        Args:
            analysis_df: DataFrame con los datos analizados
            analysis_fig: Figura de Plotly
            ajuste_info: Informaci√≥n del ajuste
            parametros: DataFrame con los par√°metros del modelo
            title: T√≠tulo del an√°lisis
        """
        st.write(f"### üìä {title}")
        
        # Mostrar gr√°fico de an√°lisis
        if analysis_fig:
            st.plotly_chart(analysis_fig, use_container_width=True)
            
            # Mostrar informaci√≥n del ajuste
            if ajuste_info:
                st.write("#### Par√°metros del Modelo Ajustado")
                
                # Crear columnas para mostrar m√©tricas
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("R¬≤ del ajuste", f"{ajuste_info['R2']:.4f}")
                with col2:
                    st.metric("Punto de inflexi√≥n (x0)", f"{ajuste_info['x0']:.1f}")
                with col3:
                    st.metric("M√°ximo te√≥rico (L)", f"{ajuste_info['L']:.1f}")
                
                # Mostrar par√°metros del modelo
                if parametros is not None:
                    st.write("#### Par√°metros del modelo sigmoidal")
                    
                    # Usar st.dataframe con estilo
                    st.dataframe(
                        parametros,
                        use_container_width=True,
                        hide_index=True,
                        column_config={
                            "Valor ajustado": st.column_config.NumberColumn("Valor ajustado", format="%.4f"),
                            "Error est√°ndar": st.column_config.NumberColumn("Error est√°ndar", format="%.4f"),
                            "Valor T": st.column_config.NumberColumn("Valor T", format="%.4f")
                        }
                    )
                
                # Mostrar fase actual
                st.info(f"**Fase actual de la tecnolog√≠a**: {ajuste_info['Fase']}")
                st.write(ajuste_info['Descripci√≥n'])
    
    @staticmethod
    def export_data(df, filename_prefix, query):
        """
        Genera un bot√≥n para exportar los datos a CSV.
        
        Args:
            df: DataFrame con los datos
            filename_prefix: Prefijo para el nombre del archivo
            query: Consulta utilizada
        """
        if df is not None:
            st.write("### üì• Exportar Datos")
            
            # Bot√≥n para descargar CSV
            csv = df.to_csv(index=False)
            query_term_clean = re.sub(r'[^\w\s]', '', query[:30])
            filename = f"{filename_prefix}_{query_term_clean}_{datetime.now().strftime('%Y%m%d')}.csv"
            
            st.download_button(
                label=f"üì• Descargar datos {filename_prefix} (CSV)",
                data=csv,
                file_name=filename,
                mime="text/csv"
            )


def run_s_curve_analysis():
    """
    Ejecuta el an√°lisis de curva en S para publicaciones acad√©micas y patentes.
    """
    st.title("üìà An√°lisis de Curvas en S: Papers y Patentes")
    
    st.write("""
    Esta herramienta te permite analizar tendencias tecnol√≥gicas a lo largo del tiempo 
    utilizando datos de publicaciones acad√©micas (papers) y patentes. El an√°lisis de curvas en S 
    te ayuda a entender la fase de madurez en la que se encuentra una tecnolog√≠a.
    """)
    
    # Configuraci√≥n de la API de Scopus
    with st.sidebar:
        st.header("‚öôÔ∏è Configuraci√≥n")
        
        api_key_input = st.text_input(
            "API Key de Scopus",
            value=st.session_state.get('scopus_api_key', ''),
            type="password",
            help="Ingresa tu API key de Scopus/Elsevier"
        )
        
        # Opci√≥n para usar una API key por defecto (la que funciona en Colab)
        use_default_key = st.checkbox(
            "Usar API key de ejemplo", 
            value=True, 
            help="Usa una API key de ejemplo para probar la aplicaci√≥n"
        )
        
        if use_default_key:
            api_key = "113f57bcfb9e922c5a33ec02233ee24d"  # API key que funciona en Colab
        else:
            api_key = api_key_input
        
        st.session_state.scopus_api_key = api_key
        
        # Opciones para tipos de datos
        st.subheader("Tipos de datos")
        analyze_papers = st.checkbox("Analizar papers", value=True)
        analyze_patents = st.checkbox("Analizar patentes", value=True)
    
    # Pesta√±as para diferentes m√©todos de construcci√≥n de consulta
    tab1, tab2 = st.tabs(["Generador de Ecuaciones", "Ecuaci√≥n Manual"])
    
    with tab1:
        # Utilizar el constructor de ecuaciones Scopus
        scopus_query = scopus_equation_interface()
    
    with tab2:
        # Entrada manual de ecuaci√≥n
        manual_query = st.text_area(
            "Ecuaci√≥n de b√∫squeda",
            placeholder='Ej: TITLE("Plantain" OR "banana" OR "musa") AND TITLE("flour" OR "starch")',
            height=100,
            key="manual_query_input"
        )
        scopus_query = manual_query if manual_query else ""
    
    # N√∫mero de resultados a recuperar para papers
    max_results = st.slider(
        "N√∫mero m√°ximo de resultados a recuperar (para papers)",
        min_value=10,
        max_value=5000,
        value=1000,
        step=10,
        help="Mayor n√∫mero = an√°lisis m√°s completo, pero toma m√°s tiempo"
    )
    
    # Secci√≥n para patentes - Gesti√≥n de plantilla y carga de archivos
    if analyze_patents:
        st.write("## üìë Datos de Patentes")
        st.write("""
        Para analizar datos de patentes, debes completar una plantilla Excel con los datos por a√±o.
        Descarga la plantilla, compl√©tala con tus datos y s√∫bela a continuaci√≥n.
        """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Opciones para la plantilla
            st.write("### üìã Opciones de Plantilla")
            
            start_year = st.number_input(
                "A√±o inicial", 
                min_value=1900,
                max_value=datetime.now().year - 5,
                value=1990,
                help="El primer a√±o para incluir en la plantilla"
            )
            
            end_year = st.number_input(
                "A√±o final", 
                min_value=start_year + 5,
                max_value=datetime.now().year,
                value=datetime.now().year,
                help="El √∫ltimo a√±o para incluir en la plantilla"
            )
            
            # Generar y descargar plantilla
            template_bytes = PatentDataManager.create_template(start_year, end_year)
            
            st.download_button(
                label="üì• Descargar Plantilla Excel",
                data=template_bytes,
                file_name=f"plantilla_patentes_{start_year}-{end_year}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="Descarga una plantilla Excel para completar con datos de patentes"
            )
        
        with col2:
            # Subir archivo con datos de patentes
            st.write("### üì§ Cargar Datos de Patentes")
            
            uploaded_file = st.file_uploader(
                "Selecciona archivo Excel con datos de patentes",
                type=["xlsx", "xls"],
                help="Sube el archivo Excel completado con datos de patentes por a√±o"
            )
            
            # Si hay un archivo cargado, guardarlo en session_state
            if uploaded_file is not None:
                # Guardar los datos en session_state para mantenerlos entre recargas
                st.session_state.patent_data_file = uploaded_file
                st.success("‚úÖ Archivo cargado correctamente")
            
            # Opci√≥n para usar datos de ejemplo cuando no hay archivo
            use_sample_data = st.checkbox(
                "Usar datos de ejemplo", 
                value=not bool(uploaded_file),
                help="Usa datos de ejemplo para probar la aplicaci√≥n"
            )
    
    # Bot√≥n de b√∫squeda y an√°lisis
    search_button = st.button(
        "üîç Analizar",
        type="primary", 
        use_container_width=True,
        disabled=not api_key or not scopus_query
    )
    
    # Ejecutar an√°lisis cuando se presiona el bot√≥n
    if search_button:
        # Contenedor para los resultados
        results_container = st.container()
        
        with results_container:
            # Determinar qu√© tipo de an√°lisis realizar
            if not analyze_papers and not analyze_patents:
                st.warning("Selecciona al menos un tipo de datos para analizar (papers o patentes).")
                return
            
            if analyze_papers:
                st.write("## üìö An√°lisis de Publicaciones Acad√©micas (Papers)")
                
                with st.spinner("Analizando publicaciones acad√©micas..."):
                    # Instanciar el analizador de papers
                    papers_analyzer = ScopusPublicationsAnalyzer(api_key)
                    
                    # Buscar papers
                    papers_results = papers_analyzer.search_publications(
                        scopus_query,
                        max_results=max_results
                    )
                    
                    # Verificar si se obtuvieron resultados
                    if papers_results:
                        # Categorizar por a√±o
                        papers_by_year = papers_analyzer.categorize_by_year(papers_results)
                        
                        # Verificar si hay datos disponibles
                        if papers_by_year:
                            # Mostrar tabla de papers por a√±o
                            df_papers = TechnologyAnalyzer.display_data_table(
                                papers_by_year, 
                                title="Tabla de Papers por A√±o"
                            )
                            
                            # Realizar an√°lisis de curva en S
                            analysis_df, analysis_fig, ajuste_info, parametros = TechnologyAnalyzer.analyze_s_curve(papers_by_year)
                            
                            # Mostrar an√°lisis de curva en S
                            TechnologyAnalyzer.display_s_curve_analysis(
                                analysis_df, 
                                analysis_fig, 
                                ajuste_info, 
                                parametros,
                                title="An√°lisis de Curva en S - Papers"
                            )
                            
                            # Exportar datos
                            TechnologyAnalyzer.export_data(
                                analysis_df if analysis_df is not None else df_papers,
                                "papers",
                                scopus_query
                            )
                        else:
                            st.warning("No se pudieron categorizar los papers por a√±o.")
                    else:
                        st.error("No se pudieron obtener resultados de papers. Por favor, verifica tu API key y la ecuaci√≥n de b√∫squeda.")
            
            if analyze_patents:
                st.write("## üìë An√°lisis de Patentes")
                
                with st.spinner("Analizando datos de patentes..."):
                    # Obtener datos de patentes (cargados o de ejemplo)
                    if uploaded_file is not None:
                        # Cargar datos desde el archivo subido
                        patents_by_year = PatentDataManager.load_data(uploaded_file)
                    elif use_sample_data:
                        # Generar datos de ejemplo basados en la consulta
                        patents_by_year = generate_sample_patent_data(scopus_query)
                    else:
                        st.warning("‚ö†Ô∏è No se han cargado datos de patentes y no se est√°n usando datos de ejemplo.")
                        patents_by_year = None
                    
                    # Verificar si hay datos disponibles
                    if patents_by_year:
                        # Mostrar tabla de patentes por a√±o
                        df_patents = TechnologyAnalyzer.display_data_table(
                            patents_by_year, 
                            title="Tabla de Patentes por A√±o"
                        )
                        
                        # Realizar an√°lisis de curva en S
                        analysis_df, analysis_fig, ajuste_info, parametros = TechnologyAnalyzer.analyze_s_curve(patents_by_year)
                        
                        # Mostrar an√°lisis de curva en S
                        TechnologyAnalyzer.display_s_curve_analysis(
                            analysis_df, 
                            analysis_fig, 
                            ajuste_info, 
                            parametros,
                            title="An√°lisis de Curva en S - Patentes"
                        )
                        
                        # Exportar datos
                        TechnologyAnalyzer.export_data(
                            analysis_df if analysis_df is not None else df_patents,
                            "patentes",
                            scopus_query
                        )
                    else:
                        st.warning("No hay datos de patentes para analizar. Por favor, carga un archivo o activa los datos de ejemplo.")
            
            # Si se analizaron ambos tipos de datos, mostrar comparaci√≥n
            if analyze_papers and analyze_patents and papers_by_year and patents_by_year:
                st.write("## üîÑ Comparaci√≥n Papers vs Patentes")
                
                with st.spinner("Generando comparaci√≥n..."):
                    # Crear DataFrame de comparaci√≥n
                    compare_years = sorted(set(list(papers_by_year.keys()) + list(patents_by_year.keys())))
                    
                    compare_data = {
                        'A√±o': compare_years,
                        'Papers': [papers_by_year.get(year, 0) for year in compare_years],
                        'Patentes': [patents_by_year.get(year, 0) for year in compare_years]
                    }
                    
                    df_compare = pd.DataFrame(compare_data)
                    
                    # Calcular acumulados
                    df_compare['Papers Acumulados'] = df_compare['Papers'].cumsum()
                    df_compare['Patentes Acumuladas'] = df_compare['Patentes'].cumsum()
                    
                    # Mostrar tabla comparativa
                    st.write("### üìä Tabla Comparativa")
                    st.dataframe(
                        df_compare,
                        use_container_width=True,
                        hide_index=True
                    )
                    
                    # Crear gr√°fico comparativo
                    fig_compare = go.Figure()
                    
                    # A√±adir l√≠neas para papers y patentes (acumulados)
                    fig_compare.add_trace(go.Scatter(
                        x=df_compare['A√±o'],
                        y=df_compare['Papers Acumulados'],
                        mode='lines+markers',
                        name='Papers (Acumulados)',
                        line=dict(color='blue', width=2)
                    ))
                    
                    fig_compare.add_trace(go.Scatter(
                        x=df_compare['A√±o'],
                        y=df_compare['Patentes Acumuladas'],
                        mode='lines+markers',
                        name='Patentes (Acumuladas)',
                        line=dict(color='red', width=2)
                    ))
                    
                    # Mejorar aspecto visual
                    fig_compare.update_layout(
                        title="Comparaci√≥n de Curvas S: Papers vs Patentes",
                        xaxis_title="A√±o",
                        yaxis_title="Cantidad Acumulada",
                        legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5),
                        plot_bgcolor='white',
                        xaxis=dict(showgrid=True, gridcolor='lightgray'),
                        yaxis=dict(showgrid=True, gridcolor='lightgray')
                    )
                    
                    # Mostrar gr√°fico
                    st.plotly_chart(fig_compare, use_container_width=True)
                    
                    # Calcular y mostrar brecha temporal
                    st.write("### üï∞Ô∏è An√°lisis de Brecha Temporal (Time Lag)")
                    
                    # Encontrar puntos de inflexi√≥n para ambas curvas (si existen)
                    papers_df, _, papers_info, _ = TechnologyAnalyzer.analyze_s_curve(papers_by_year)
                    patents_df, _, patents_info, _ = TechnologyAnalyzer.analyze_s_curve(patents_by_year)
                    
                    if papers_info and patents_info and 'x0' in papers_info and 'x0' in patents_info:
                        # Calcular brecha entre puntos de inflexi√≥n
                        time_lag = patents_info['x0'] - papers_info['x0']
                        
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric(
                                "Punto de inflexi√≥n Papers", 
                                f"{papers_info['x0']:.1f}",
                                help="A√±o estimado del punto de inflexi√≥n para publicaciones acad√©micas"
                            )
                        
                        with col2:
                            st.metric(
                                "Punto de inflexi√≥n Patentes", 
                                f"{patents_info['x0']:.1f}",
                                help="A√±o estimado del punto de inflexi√≥n para patentes"
                            )
                        
                        with col3:
                            st.metric(
                                "Time Lag (a√±os)", 
                                f"{time_lag:.1f}",
                                delta=None,
                                help="Diferencia temporal entre los puntos de inflexi√≥n de patentes y papers"
                            )
                        
                        # Interpretaci√≥n del time lag
                        if time_lag > 0:
                            st.info(f"Las patentes muestran un retraso de aproximadamente {time_lag:.1f} a√±os respecto a las publicaciones acad√©micas. Esto sugiere que la investigaci√≥n acad√©mica ha precedido a la comercializaci√≥n de esta tecnolog√≠a.")
                        elif time_lag < 0:
                            st.info(f"Las patentes muestran un adelanto de aproximadamente {abs(time_lag):.1f} a√±os respecto a las publicaciones acad√©micas. Esto sugiere que la comercializaci√≥n ha precedido a la investigaci√≥n acad√©mica profunda en esta tecnolog√≠a.")
                        else:
                            st.info("No hay brecha temporal significativa entre publicaciones acad√©micas y patentes, sugiriendo un desarrollo paralelo entre investigaci√≥n y comercializaci√≥n.")
            
            # Mostrar explicaci√≥n metodol√≥gica
            with st.expander("Metodolog√≠a del an√°lisis de curva en S"):
                st.markdown("""
                ### Metodolog√≠a del an√°lisis de curva en S
                
                Este an√°lisis utiliza la siguiente metodolog√≠a:
                
                1. **Recopilaci√≥n de datos**: 
                   - Papers: Se obtienen datos de publicaciones acad√©micas desde Scopus.
                   - Patentes: Se cargan datos manualmente desde un archivo Excel.
                
                2. **C√°lculo de acumulado**: Se calcula el n√∫mero acumulado por cada a√±o.
                
                3. **An√°lisis matem√°tico**:
                   - Se calcula la tasa de crecimiento anual 
                   - Se calcula la segunda derivada para identificar puntos de inflexi√≥n
                   - Se ajusta un modelo sigmoidal de tres par√°metros a los datos acumulados
                
                4. **Modelo sigmoidal**: Se utiliza la funci√≥n:
                   ```
                   f(x) = L / (1 + exp(-k * (x - x0)))
                   ```
                   Donde:
                   - L = valor m√°ximo te√≥rico (as√≠ntota)
                   - x0 = punto medio (punto de inflexi√≥n)
                   - k = tasa de crecimiento
                
                5. **Identificaci√≥n de la fase**: Se determina la fase actual de la tecnolog√≠a bas√°ndose en la segunda derivada.
                
                6. **C√°lculo de brecha temporal (time lag)**: Se compara la diferencia entre los puntos de inflexi√≥n de papers y patentes.
                """)
            
            # Opci√≥n para guardar los resultados en la base de datos
            if analyze_papers or analyze_patents:
                st.write("## üíæ Guardar Resultados")
                st.write("Puedes guardar este an√°lisis para futuras comparaciones.")
                
                # Opciones para guardar
                save_expander = st.expander("Guardar este an√°lisis", expanded=False)
                
                with save_expander:
                    # Inicializar sistema de base de datos
                    from data_storage import initialize_github_db
                    
                    # Usar almacenamiento local en lugar de GitHub
                    db = initialize_github_db(use_local=True)
                    
                    if db is None:
                        st.error("‚ùå No se pudo inicializar el sistema de almacenamiento.")
                    else:
                        # Formulario para guardar
                        with st.form("save_analysis_form"):
                            # Nombre del an√°lisis
                            analysis_name = st.text_input(
                                "Nombre para este an√°lisis",
                                value=f"An√°lisis de {scopus_query[:30]}..." if len(scopus_query) > 30 else f"An√°lisis de {scopus_query}"
                            )
                            
                            # Seleccionar categor√≠a
                            categories = db.get_all_categories()
                            category_options = {cat["name"]: cat["id"] for cat in categories}
                            
                            selected_category = st.selectbox(
                                "Categor√≠a",
                                options=list(category_options.keys()),
                                index=0
                            )
                            
                            selected_category_id = category_options[selected_category]
                            
                            # Opci√≥n para crear nueva categor√≠a
                            new_category = st.checkbox("Crear nueva categor√≠a")
                            
                            if new_category:
                                new_cat_name = st.text_input("Nombre de la nueva categor√≠a")
                                new_cat_desc = st.text_input("Descripci√≥n (opcional)")
                            
                            # Bot√≥n para guardar
                            submit = st.form_submit_button("Guardar An√°lisis")
                            
                            if submit:
                                # Crear nueva categor√≠a si es necesario
                                if new_category and new_cat_name:
                                    category_id = db.create_category(new_cat_name, new_cat_desc)
                                    if not category_id:
                                        st.error("‚ùå Error al crear la categor√≠a.")
                                        st.stop()
                                else:
                                    category_id = selected_category_id
                                
                                # Preparar datos para guardar
                                paper_data = papers_by_year if analyze_papers and 'papers_by_year' in locals() else None
                                patent_data = patents_by_year if analyze_patents and 'patents_by_year' in locals() else None
                                
                                paper_metrics = ajuste_info if analyze_papers and 'ajuste_info' in locals() else None
                                patent_metrics = ajuste_info if analyze_patents and 'ajuste_info' in locals() else None
                                
                                # Guardar en la base de datos
                                analysis_id = db.save_s_curve_analysis(
                                    query=scopus_query,
                                    paper_data=paper_data,
                                    patent_data=patent_data,
                                    paper_metrics=paper_metrics,
                                    patent_metrics=patent_metrics,
                                    category_id=category_id,
                                    analysis_name=analysis_name
                                )
                                
                                if analysis_id:
                                    st.success(f"‚úÖ An√°lisis guardado correctamente con ID: {analysis_id}")
                                    st.info("Puedes ver y comparar todos los an√°lisis guardados en la pesta√±a 'Datos Guardados'.")
                                else:
                                    st.error("‚ùå Error al guardar el an√°lisis.")
    else:
        # Mostrar instrucciones cuando no se ha realizado b√∫squeda
        st.info("""
        ### üöÄ C√≥mo comenzar:
        
        1. Selecciona los tipos de datos que deseas analizar (papers y/o patentes) en el panel lateral
        2. La API key de ejemplo est√° activada por defecto para papers
        3. Usa el generador de ecuaciones para construir tu consulta de b√∫squeda
        4. Si deseas analizar patentes, descarga la plantilla Excel, compl√©tala y s√∫bela
        5. Haz clic en "Analizar" para iniciar el an√°lisis
        
        ### üìù Consulta de ejemplo:
        
        TITLE("banana") AND TITLE("flour")
        """)


def generate_sample_patent_data(query, start_year=1990, end_year=None):
    """
    Genera datos de muestra para patentes basados en la consulta de b√∫squeda.
    √ötil para demostraci√≥n cuando no hay datos reales disponibles.
    
    Args:
        query (str): Consulta de b√∫squeda para extraer t√©rminos relevantes
        start_year (int): A√±o inicial para los datos
        end_year (int): A√±o final para los datos (por defecto es el a√±o actual)
        
    Returns:
        dict: Diccionario con datos de patentes por a√±o {a√±o: conteo}
    """
    if end_year is None:
        end_year = datetime.now().year
    
    # Extraer t√©rminos de b√∫squeda para hacer la demostraci√≥n m√°s realista
    search_terms = []
    for term in re.findall(r'"([^"]+)"', query):
        search_terms.append(term)
    
    if not search_terms and query:
        # Si no hay t√©rminos entre comillas, tomar palabras individuales
        search_terms = re.findall(r'\b\w+\b', query)
    
    # Crear semilla para reproducibilidad basada en los t√©rminos de b√∫squeda
    seed = sum(ord(c) for c in "".join(search_terms)) if search_terms else 42
    np.random.seed(seed)
    
    # Generar a√±os
    years = list(range(start_year, end_year + 1))
    
    # Generar conteos con tendencia creciente para patentes (curva t√≠pica)
    # Patrones comunes en datos de patentes: crecimiento lento inicial, aceleraci√≥n, desaceleraci√≥n
    x = np.linspace(0, 1, len(years))
    
    # Crear curva sigmoidal modificada con inicio m√°s lento
    base_values = 1000 * (1 / (1 + np.exp(-12 * (x - 0.6))))
    
    # A√±adir variaci√≥n aleatoria
    noise = np.random.normal(0, 0.1, len(years))
    values_with_noise = base_values * (1 + noise)
    
    # Convertir a enteros y asegurar no negativos
    patent_counts = np.maximum(0, np.round(values_with_noise)).astype(int)
    
    # Crear diccionario {a√±o: conteo}
    patents_by_year = dict(zip(years, patent_counts))
    
    # A√±adir tendencia espec√≠fica seg√∫n t√©rminos de b√∫squeda
    # (Por ejemplo, t√©rminos m√°s recientes tendr√°n m√°s patentes en a√±os recientes)
    recency_factor = 0.5  # Peso para la preferencia por t√©rminos recientes
    if search_terms and len(search_terms) > 1:
        for i, term in enumerate(search_terms):
            term_weight = (i / len(search_terms)) * recency_factor
            for year in years:
                year_factor = (year - start_year) / (end_year - start_year)
                boost = int(10 * term_weight * year_factor * np.random.random())
                patents_by_year[year] += boost
    
    return patents_by_year


if __name__ == "__main__":
    run_s_curve_analysis()