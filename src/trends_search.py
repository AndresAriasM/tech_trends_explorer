# src/trends_search.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from io import BytesIO
from googleapiclient.discovery import build
from analysis import QueryBuilder, ResultAnalyzer  # Aseguramos que QueryBuilder est√© importado correctamente
from config import CONFIG

def run_trend_search():
    """
    Ejecuta la funcionalidad de b√∫squeda de tendencias usando Google Custom Search
    """
    st.markdown('<p class="tab-subheader">üîç B√∫squeda de Tendencias</p>', unsafe_allow_html=True)
    
    st.write("""
    Esta herramienta te permite analizar tendencias tecnol√≥gicas utilizando Google Custom Search.
    Los resultados se analizan para identificar patrones, fuentes principales, y distribuci√≥n temporal.
    """)
    
    # Gesti√≥n de topics
    st.write("### üéØ Define tus t√©rminos de b√∫squeda")
    topics = manage_topics("trends")  # Pasamos un prefijo √∫nico para este m√≥dulo
    
    # Configuraci√≥n de b√∫squeda en el sidebar
    with st.expander("‚öôÔ∏è Opciones de b√∫squeda", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            max_results = st.number_input(
                "N√∫mero de resultados",
                min_value=10,
                max_value=1000,
                value=50,
                step=10,
                help="N√∫mero total de resultados a obtener"
            )
        with col2:
            min_year = st.number_input(
                "A√±o m√≠nimo",
                min_value=1970,
                max_value=2025,
                value=2014,
                help="A√±o desde el cual buscar resultados"
            )
        
        st.write("### üìë Tipos de Contenido")
        col1, col2 = st.columns(2)
        with col1:
            academic = st.checkbox("Art√≠culos Acad√©micos", value=True, 
                                  help="Incluir resultados de Google Scholar y otros repositorios acad√©micos")
            news = st.checkbox("Noticias", value=True, 
                              help="Incluir art√≠culos de noticias y medios")
        with col2:
            pdfs = st.checkbox("PDFs", value=True, 
                              help="Incluir documentos PDF")
            patents = st.checkbox("Patentes", value=True, 
                                 help="Incluir patentes relacionadas")
        
        content_types = {
            'academic': academic,
            'news': news,
            'pdfs': pdfs,
            'patents': patents
        }
    
    # Bot√≥n de an√°lisis
    if st.button("üîç Analizar Tendencias", type="primary", key="trends_analyze_button"):  # Key √∫nica
        if not topics:
            st.error("Por favor, ingresa al menos un tema para buscar")
            return
            
        if not st.session_state.google_api_key or not st.session_state.search_engine_id:
            st.error("Se requiere Google API Key y Search Engine ID. Por favor, config√∫ralos en el panel lateral.")
            return
            
        with st.spinner("üîÑ Analizando tendencias tecnol√≥gicas..."):
            # Inicializar analizadores
            query_builder = QueryBuilder()
            
            # Construir query principal
            processed_topics = process_topics(topics)
            google_query = query_builder.build_google_query(
                processed_topics,
                min_year,
                content_types.get('patents', True)
            )
            
            # Crear objeto de informaci√≥n de queries
            query_info = {
                'google_query': google_query,
                'scopus_query': query_builder.build_scopus_query(topics, min_year),
                'search_query': google_query,
                'time_range': f"{min_year}-{datetime.now().year}"
            }
            
            # Realizar b√∫squeda general con Google API
            success, general_results = perform_search(
                st.session_state.google_api_key,
                st.session_state.search_engine_id,
                google_query,
                content_types,
                max_results=max_results
            )
            
            if success:
                # Mostrar resultados generales
                show_analysis_results(
                    results=general_results,
                    query_info=query_info,
                    search_topics=topics,
                    content_types=content_types
                )
            else:
                st.error("Error en la b√∫squeda general de tendencias")
    else:
        # Mostrar mensaje informativo cuando no hay b√∫squeda
        st.info("""
        ### üöÄ C√≥mo comenzar:
        
        1. Define tus t√©rminos de b√∫squeda en el formulario superior
        2. Configura las opciones de b√∫squeda seg√∫n tus necesidades
        3. Haz clic en "Analizar Tendencias" para iniciar el an√°lisis
        
        Los resultados te mostrar√°n:
        - Distribuci√≥n por tipo de contenido
        - Tendencia temporal
        - Palabras clave m√°s frecuentes
        - Resultados detallados con enlaces
        """)

# Funciones auxiliares importadas del script principal
# Modificaci√≥n para manage_topics() en trends_search.py

def manage_topics(prefix="trends"):
    """Maneja la adici√≥n y eliminaci√≥n de topics con opciones avanzadas."""
    # Usar un estado espec√≠fico para este m√≥dulo
    state_key = f"{prefix}_topics_data"
    if state_key not in st.session_state:
        st.session_state[state_key] = [{'id': 0, 'value': '', 'operator': 'AND', 'exact_match': False}]
    
    # Mostrar gu√≠a de b√∫squeda
    with st.expander("üìñ Gu√≠a de B√∫squeda Avanzada", expanded=False):
        st.markdown("""
        ### Operadores de B√∫squeda
        - **AND**: Encuentra resultados que contienen TODOS los t√©rminos (Por defecto)
        - **OR**: Encuentra resultados que contienen ALGUNO de los t√©rminos
        
        ### Opciones Adicionales
        - **Coincidencia exacta** ("..."): Busca la frase exacta
        - **Exclusi√≥n** (-): Excluye t√©rminos espec√≠ficos
        - **Comod√≠n** (*): Busca variaciones de palabras
        
        ### Ejemplos
        - `"machine learning" AND robotics`: Encuentra resultados que contengan exactamente "machine learning" Y tambi√©n "robotics"
        - `AI OR "artificial intelligence"`: Encuentra resultados que contengan "AI" O "artificial intelligence"
        - `blockchain -crypto`: Encuentra resultados sobre blockchain pero excluye los que mencionan crypto
        """)
    
    topics = []
    topics_to_remove = []

    st.write("### üîç Construye tu b√∫squeda")

    # Crear columnas para cada topic con opciones avanzadas
    for topic in st.session_state[state_key]:  # Usar el state_key espec√≠fico
        col1, col2, col3, col4 = st.columns([4, 2, 2, 1])
        
        with col1:
            value = st.text_input(
                f"T√©rmino {topic['id'] + 1}",
                value=topic.get('value', ''),
                key=f"{prefix}_topic_{topic['id']}",
                placeholder="Ej: 'artificial intelligence' OR robot*"
            )
            topic['value'] = value
            topics.append({
                'value': value,
                'operator': topic.get('operator', 'AND'),
                'exact_match': topic.get('exact_match', False)
            })
        
        with col2:
            operator = st.selectbox(
                "Operador",
                options=['AND', 'OR', 'NOT'],
                index=['AND', 'OR', 'NOT'].index(topic['operator']),
                key=f"{prefix}_operator_{topic['id']}"
            )
            topic['operator'] = operator  # Actualizamos el operador en el topic directamente
        
        with col3:
            exact_match = st.checkbox(
                "Coincidencia exacta",
                value=topic.get('exact_match', False),
                key=f"{prefix}_exact_{topic['id']}"
            )
            topic['exact_match'] = exact_match
        
        with col4:
            if len(st.session_state[state_key]) > 1:  # Usar el state_key espec√≠fico
                if st.button('‚ùå', key=f"{prefix}_remove_{topic['id']}"):
                    topics_to_remove.append(topic['id'])

    # Remover topics marcados para eliminaci√≥n
    if topics_to_remove:
        st.session_state[state_key] = [  # Usar el state_key espec√≠fico
            topic for topic in st.session_state[state_key] 
            if topic['id'] not in topics_to_remove
        ]
        st.rerun()

    # Bot√≥n para a√±adir nuevo topic
    if st.button("‚ûï A√±adir otro t√©rmino", key=f"{prefix}_add_topic"):
        new_id = max([t['id'] for t in st.session_state[state_key]]) + 1  # Usar el state_key espec√≠fico
        st.session_state[state_key].append({  # Usar el state_key espec√≠fico
            'id': new_id,
            'value': '',
            'operator': 'AND',
            'exact_match': False
        })
        st.rerun()

    # Construir y mostrar la ecuaci√≥n final
    if topics:
        equation = build_search_equation(topics)
        st.write("### üìù Ecuaci√≥n de b√∫squeda")
        st.code(equation)

    return topics

def build_search_equation(topics):
    """Construye la ecuaci√≥n de b√∫squeda en base a los t√©rminos y operadores, sin operador al final."""
    equation = ""
    for i, topic in enumerate(topics):
        # Escapamos los espacios si es una coincidencia exacta
        if topic['exact_match']:
            term = f'"{topic["value"]}"'
        else:
            term = topic['value']
        
        if i == len(topics) - 1:  # Si es el √∫ltimo t√©rmino, no a√±adimos operador
            equation += f"{term}"
        else:  # Para todos los dem√°s t√©rminos, agregamos operador
            equation += f"{term} {topic['operator']} "
    
    return equation

def process_topics(topics_data):
    """
    Procesa los topics antes de construir la query
    
    Args:
        topics_data: Lista de topics con sus operadores y opciones
    Returns:
        Lista de diccionarios procesados
    """
    processed_topics = []
    
    for topic in topics_data:
        if topic['value'].strip():  # Solo procesar topics no vac√≠os
            processed_topic = {
                'value': topic['value'].strip(),
                'operator': topic.get('operator', 'AND'),
                'exact_match': topic.get('exact_match', False)
            }
            
            # Si ya tiene comillas, desactivar exact_match
            if processed_topic['value'].startswith('"') and processed_topic['value'].endswith('"'):
                processed_topic['exact_match'] = False
            
            processed_topics.append(processed_topic)
    
    return processed_topics

def perform_search(api_key, search_engine_id, query, content_types, max_results=100):
    """
    Realiza b√∫squedas en Google Custom Search respetando el l√≠mite de resultados especificado
    """
    try:
        service = build("customsearch", "v1", developerKey=api_key)
        all_results = []
        
        # Construir filtros basados en los tipos de contenido seleccionados
        type_filters = []
        base_query = query

        if content_types.get('academic', False):
            type_filters.append('site:scholar.google.com OR site:sciencedirect.com OR site:springer.com OR site:ieee.org')
        if content_types.get('news', False):
            type_filters.append('site:news.google.com OR site:reuters.com OR site:bloomberg.com')
        if content_types.get('pdfs', False):
            type_filters.append('filetype:pdf')
        if not content_types.get('patents', False):
            base_query += ' -patent -uspto.gov -espacenet'

        # Combinar query con filtros
        if type_filters:
            final_query = f"({base_query}) AND ({' OR '.join(type_filters)})"
        else:
            final_query = base_query

        # Calcular n√∫mero total de p√°ginas necesarias
        total_pages = (max_results + 9) // 10
        
        # Debug: Mostrar informaci√≥n de la b√∫squeda
        st.write(f"Buscando hasta {max_results} resultados en {total_pages} p√°ginas")
        
        # Crear barra de progreso
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for page in range(total_pages):
            start_index = (page * 10) + 1
            
            # Actualizar estado
            progress = (page + 1) / total_pages
            progress_bar.progress(progress)
            status_text.text(f"Obteniendo resultados... P√°gina {page + 1} de {total_pages} ({len(all_results)} resultados encontrados)")
            
            try:
                result = service.cse().list(
                    q=final_query,
                    cx=search_engine_id,
                    num=min(10, max_results - len(all_results)),  # No pedir m√°s de los necesarios
                    start=start_index
                ).execute()
                
                items = result.get('items', [])
                if not items:
                    break
                    
                all_results.extend(items)
                
                # Verificar si ya tenemos suficientes resultados
                if len(all_results) >= max_results:
                    all_results = all_results[:max_results]
                    break
                
            except Exception as e:
                st.warning(f"Error en p√°gina {page + 1}: {str(e)}")
                break  # Si hay error, detenemos la b√∫squeda
        
        # Limpiar indicadores de progreso
        progress_bar.empty()
        status_text.empty()
        
        # Informar resultados obtenidos
        st.info(f"B√∫squeda completada: {len(all_results)} resultados encontrados")
        
        return True, all_results
    except Exception as e:
        st.error(f"Error en la b√∫squeda: {str(e)}")
        return False, str(e)

def show_analysis_results(results, query_info, search_topics, content_types, hype_data=None, hype_figures=None):
    """
    Muestra los resultados del an√°lisis de tendencias
    """
    # Crear instancia del analizador
    analyzer = ResultAnalyzer()
    processed_results, stats = analyzer.analyze_results(results, search_topics)
    
    # Funci√≥n para determinar el tipo de resultado
    def get_result_type(result):
        url = result['link'].lower()
        title = result['title'].lower()
        
        if any(term in url for term in ['.pdf', '/pdf/']):
            return 'pdf'
        elif any(term in url for term in ['patent', 'uspto.gov', 'espacenet']):
            return 'patent'
        elif any(term in url for term in ['scholar.google', 'sciencedirect', 'springer', 'ieee']):
            return 'academic'
        elif any(term in url for term in ['news.google', 'reuters', 'bloomberg']):
            return 'news'
        return 'web'

    # Filtrar resultados seg√∫n las selecciones del sidebar
    filtered_results = []
    for result in processed_results:
        result_type = get_result_type(result)
        
        # Aplicar filtros seg√∫n el tipo
        if (
            (result_type == 'pdf' and content_types.get('pdfs', True)) or
            (result_type == 'academic' and content_types.get('academic', True)) or
            (result_type == 'news' and content_types.get('news', True)) or
            (result_type == 'patent' and content_types.get('patents', True)) or
            (result_type == 'web')  # Web siempre se muestra
        ):
            filtered_results.append(result)

    # Estados iniciales para la b√∫squeda en resultados
    if 'trends_search_query' not in st.session_state:  # Usar nombre espec√≠fico para evitar conflictos
        st.session_state.trends_search_query = ''
    if 'trends_search_results' not in st.session_state:  # Usar nombre espec√≠fico para evitar conflictos
        st.session_state.trends_search_results = filtered_results

    # Mostrar ecuaciones de b√∫squeda
    with st.expander("üìù Ver ecuaciones de b√∫squeda", expanded=True):
        st.write("##### Ecuaci√≥n de b√∫squeda en Google:")
        st.code(query_info['google_query'])
        st.write("##### Ecuaci√≥n de b√∫squeda en Scopus:")
        st.code(query_info['scopus_query'])

    # Mostrar conteo de resultados
    total_results = len(processed_results)
    filtered_count = len(filtered_results)
    search_count = len(st.session_state.trends_search_results)

    if filtered_count < total_results:
        st.info(f"Mostrando {filtered_count} de {total_results} resultados (filtrados por tipo de contenido)")
    
    if st.session_state.trends_search_query:
        st.info(f"Encontrados {search_count} resultados que coinciden con la b√∫squeda")
    
    # Calcular distribuci√≥n de tipos de contenido
    content_distribution = {}
    for result in filtered_results:
        result_type = get_result_type(result).upper()
        content_distribution[result_type] = content_distribution.get(result_type, 0) + 1

    # Gr√°ficos de distribuci√≥n
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("### üìä Distribuci√≥n por tipo de contenido")
        fig_type = px.pie(
            values=list(content_distribution.values()),
            names=list(content_distribution.keys()),
            title=f"Distribuci√≥n de {filtered_count} resultados por tipo"
        )
        fig_type.update_traces(
            textposition='inside',
            textinfo='percent+label+value',
            marker_colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']  # Colores personalizados
        )
        fig_type.update_layout(
            showlegend=True,
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
        )
        st.plotly_chart(fig_type, use_container_width=True)
        
        # Mostrar tabla de distribuci√≥n bajo el gr√°fico
        st.write("#### Detalle de distribuci√≥n:")
        distribution_data = pd.DataFrame(
            {
                'Tipo': list(content_distribution.keys()),
                'Cantidad': list(content_distribution.values()),
                'Porcentaje': [f"{(v/filtered_count)*100:.1f}%" for v in content_distribution.values()]
            }
        )
        st.dataframe(distribution_data, hide_index=True)
    
    with col2:
        st.write("### üìà Tendencia temporal")
        if stats['by_year']:
            fig_year = px.bar(
                x=list(stats['by_year'].keys()),
                y=list(stats['by_year'].values()),
                title="Distribuci√≥n por a√±o"
            )
            fig_year.update_xaxes(title="A√±o")
            fig_year.update_yaxes(title="Cantidad")
            st.plotly_chart(fig_year, use_container_width=True)
    
    # Gr√°fico de palabras clave
    st.write("### üè∑Ô∏è Palabras clave m√°s frecuentes")
    if stats['common_keywords']:
        keywords_df = pd.DataFrame(stats['common_keywords'], columns=['Keyword', 'Count'])
        fig_keywords = px.bar(
            keywords_df.head(10),
            x='Keyword',
            y='Count',
            title="T√©rminos m√°s frecuentes en los resultados"
        )
        fig_keywords.update_layout(
            xaxis_title="Palabras clave",
            yaxis_title="Frecuencia",
            showlegend=False
        )
        st.plotly_chart(fig_keywords, use_container_width=True)
    
    # Bot√≥n de descarga
    st.write("### üì• Exportar Resultados")
    
    # Combinar todas las figuras
    all_figures = {
        "Distribuci√≥n por Tipo": fig_type,
        "Tendencia Temporal": fig_year,
        "Palabras Clave": fig_keywords
    }
    
    # Agregar figuras del Hype Cycle si existen
    if hype_figures:
        all_figures.update(hype_figures)
    
    # Usar session state para evitar recargas
    if 'trends_pdf_generated' not in st.session_state:  # Usar nombre espec√≠fico para evitar conflictos
        st.session_state.trends_pdf_generated = False
    
    download_col1, download_col2 = st.columns([3, 1])
    
    with download_col1:
        try:
            pdf_data = export_to_pdf(
                results=results,
                query_info=query_info,
                hype_data=hype_data,
                figures=all_figures
            )
            
            if st.download_button(
                label="üì• Descargar Informe Completo (PDF)",
                data=pdf_data,
                file_name=f"analisis_tendencias_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                mime="application/pdf",
                key=f"trends_download_pdf_{datetime.now().timestamp()}",  # Key √∫nica con prefijo
                on_click=lambda: setattr(st.session_state, 'trends_pdf_generated', True)
            ):
                pass  # No hacemos nada aqu√≠ para evitar recargas
                
        except Exception as e:
            st.error(f"Error al generar el PDF: {str(e)}")
    
    with download_col2:
        if st.session_state.trends_pdf_generated:
            st.success("‚úÖ Listo!")

    # Mostrar resultados
    st.write("### üìë Resultados detallados")
    results_to_show = st.session_state.trends_search_results
    
    if not results_to_show:
        st.warning("No se encontraron resultados que coincidan con los filtros actuales")
    else:
        for i, result in enumerate(results_to_show):
            with st.expander(f"üìÑ {result['title']}", expanded=False):
                col1, col2 = st.columns([2,1])
                with col1:
                    st.markdown("**Descripci√≥n:**")
                    st.write(result['snippet'])
                    st.markdown(f"üîó [Ver documento completo]({result['link']})")
                with col2:
                    st.markdown("**Detalles:**")
                    st.markdown(f"üìÖ **A√±o:** {result.get('year', 'No especificado')}")
                    st.markdown(f"üåç **Pa√≠s:** {result.get('country', 'No especificado')}")
                    tipo = get_result_type(result).upper()
                    st.markdown(f"üìä **Tipo:** {tipo}")

def export_to_pdf(results, query_info, hype_data, figures, news_results=None):
    """Exporta los resultados a un archivo PDF"""
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from io import BytesIO
    
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    # Estilos personalizados
    styles.add(ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30
    ))
    
    styles.add(ParagraphStyle(
        'SectionTitle',
        parent=styles['Heading2'],
        fontSize=16,
        spaceBefore=15,
        spaceAfter=10
    ))

    # T√≠tulo y fecha
    story.append(Paragraph('An√°lisis de Tendencias Tecnol√≥gicas', styles['CustomTitle']))
    story.append(Paragraph(f'Generado el {datetime.now().strftime("%d-%m-%Y %H:%M")}', styles['Normal']))
    story.append(Spacer(1, 20))

    # Ecuaciones de b√∫squeda
    story.append(Paragraph('Ecuaciones de B√∫squeda', styles['SectionTitle']))
    story.append(Paragraph(f'<b>Google:</b> {query_info["google_query"]}', styles['Normal']))
    story.append(Paragraph(f'<b>Scopus:</b> {query_info["scopus_query"]}', styles['Normal']))
    story.append(Spacer(1, 20))

    # M√©tricas y estad√≠sticas
    story.append(Paragraph('Estad√≠sticas Generales', styles['SectionTitle']))
    story.append(Paragraph(f'Total de resultados encontrados: {len(results)}', styles['Normal']))
    story.append(Spacer(1, 12))

    # Gr√°ficos de an√°lisis general
    for name, fig in figures.items():
        story.append(Paragraph(name, styles['SectionTitle']))
        img_bytes = BytesIO()
        fig.write_image(img_bytes, format='png', width=600, height=400)
        img = Image(img_bytes, width=6*inch, height=4*inch)
        story.append(img)
        story.append(Spacer(1, 12))

    # En la funci√≥n export_to_pdf, despu√©s de los gr√°ficos generales
    if hype_data and isinstance(hype_data, dict):
        story.append(Paragraph('An√°lisis del Hype Cycle de Gartner', styles['SectionTitle']))
        story.append(Paragraph(f'<b>Fase Actual:</b> {hype_data["phase"]}', styles['Normal']))
        
        # Agregar todos los gr√°ficos relacionados con Gartner
        for name, fig in figures.items():
            if any(term in name.lower() for term in ['hype', 'menciones', 'sentimiento']):
                story.append(Paragraph(name, styles['SectionTitle']))
                img_bytes = BytesIO()
                fig.write_image(img_bytes, format='png', width=600, height=400)
                img = Image(img_bytes, width=6*inch, height=4*inch)
                story.append(img)
                story.append(Spacer(1, 12))
                
    # An√°lisis del Hype Cycle
    if hype_data:
        story.append(Paragraph('An√°lisis del Hype Cycle de Gartner', styles['SectionTitle']))
        story.append(Paragraph(f'<b>Fase Actual:</b> {hype_data["phase"]}', styles['Normal']))
        
        # Descripci√≥n de la fase
        phase_descriptions = {
            "Innovation Trigger": """La tecnolog√≠a est√° en su fase inicial de innovaci√≥n, caracterizada por:
            ‚Ä¢ Alto nivel de inter√©s y especulaci√≥n
            ‚Ä¢ Pocos casos de implementaci√≥n real
            ‚Ä¢ Gran potencial percibido""",
            "Peak of Inflated Expectations": """La tecnolog√≠a est√° en su punto m√°ximo de expectativas, donde se observa:
            ‚Ä¢ M√°xima cobertura medi√°tica
            ‚Ä¢ Altas expectativas de mercado
            ‚Ä¢ Posible sobreestimaci√≥n de capacidades""",
            "Trough of Disillusionment": """La tecnolog√≠a est√° atravesando una fase de desilusi√≥n, caracterizada por:
            ‚Ä¢ Disminuci√≥n del inter√©s inicial
            ‚Ä¢ Identificaci√≥n de limitaciones reales
            ‚Ä¢ Reevaluaci√≥n de expectativas""",
            "Slope of Enlightenment": """La tecnolog√≠a est√° madurando hacia una comprensi√≥n realista, donde se observa:
            ‚Ä¢ Casos de uso bien definidos
            ‚Ä¢ Beneficios comprobados
            ‚Ä¢ Adopci√≥n m√°s estrat√©gica""",
            "Plateau of Productivity": """La tecnolog√≠a ha alcanzado un nivel de madurez estable, caracterizada por:
            ‚Ä¢ Adopci√≥n generalizada
            ‚Ä¢ Beneficios claramente demostrados
            ‚Ä¢ Implementaci√≥n sistem√°tica"""
        }
        story.append(Paragraph(phase_descriptions[hype_data['phase']], styles['Normal']))
        story.append(Spacer(1, 12))
        
        # M√©tricas del Hype Cycle
        if 'yearly_stats' in hype_data:
            yearly_stats = hype_data['yearly_stats']
            story.append(Paragraph('M√©tricas de An√°lisis', styles['SectionTitle']))
            story.append(Paragraph(f"<b>Total de Menciones:</b> {yearly_stats['mention_count'].sum()}", styles['Normal']))
            avg_sentiment = yearly_stats['sentiment_mean'].mean()
            sentiment_label = "Positivo" if avg_sentiment > 0 else "Negativo"
            story.append(Paragraph(f"<b>Sentimiento Promedio:</b> {avg_sentiment:.2f} ({sentiment_label})", styles['Normal']))
            
            trend = yearly_stats['mention_count'].pct_change().mean()
            trend_label = "Creciente" if trend > 0 else "Decreciente"
            story.append(Paragraph(f"<b>Tendencia:</b> {trend_label} ({trend:.1%})", styles['Normal']))

    # Resultados detallados
    story.append(Paragraph('Resultados Detallados', styles['SectionTitle']))
    for result in results:
        story.append(Paragraph(result['title'], styles['Heading3']))
        story.append(Paragraph(result.get('snippet', 'No hay descripci√≥n disponible'), styles['Normal']))
        story.append(Paragraph(f'<link href="{result["link"]}">{result["link"]}</link>', styles['Normal']))
        if result.get('year'):
            story.append(Paragraph(f'<b>A√±o:</b> {result["year"]}', styles['Normal']))
        story.append(Spacer(1, 12))

    # Construir PDF
    doc.build(story)
    buffer.seek(0)
    return buffer.getvalue()