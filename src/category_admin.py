# src/category_admin.py - VERSI√ìN OPTIMIZADA PARA RENDIMIENTO Y SIN RERUNS
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from datetime import datetime
from typing import List, Dict, Optional
import json
import time
import math
from datetime import datetime, timedelta
from decimal import Decimal

import plotly.graph_objects as go
import plotly.express as px

# Opcional para mejor suavizado (si est√° disponible):
try:
    from scipy.ndimage import gaussian_filter1d
    SCIPY_AVAILABLE = True
except ImportError:
    SCIPY_AVAILABLE = False

# Importar m√≥dulos locales
from hype_cycle_positioning import HypeCyclePositioner


class CategoryAdminInterface:
    """Interfaz OPTIMIZADA de administraci√≥n de categor√≠as y tecnolog√≠as del Hype Cycle"""
    
    def __init__(self, hype_storage, context_prefix: str = "default"):
        """
        Inicializa la interfaz de administraci√≥n optimizada
        
        Args:
            hype_storage: Instancia de HypeCycleStorage
            context_prefix: Prefijo √∫nico para evitar conflictos de keys
        """
        self.storage = hype_storage
        
        # FIJO: Usar context_prefix estable sin timestamps
        if not context_prefix or context_prefix == "default":
            self.context_prefix = "category_admin"
        else:
            self.context_prefix = context_prefix
        
        # BASE KEY ESTABLE para todos los estados
        self._state_key_base = f"admin_state_{self.context_prefix}"
        
        # Importar positioner
        from hype_cycle_positioning import HypeCyclePositioner
        self.positioner = HypeCyclePositioner()
        
        # Cache local para mejorar rendimiento
        self._local_cache = {}
        self._cache_timestamp = {}
        self._cache_ttl = 300  # 5 minutos
        
        # Inicializar estados estables
        self._init_stable_states()
    
    def _init_stable_states(self):
        """Inicializa estados estables que persisten entre reruns"""
        # Estados principales con keys fijas
        state_keys = {
            f"{self._state_key_base}_selected_category_for_chart": None,
            f"{self._state_key_base}_chart_category_name": None,
            f"{self._state_key_base}_chart_show_labels": True,
            f"{self._state_key_base}_chart_show_confidence": False,
            f"{self._state_key_base}_refresh_trigger": 0,
            # Estados para gesti√≥n avanzada
            f"{self._state_key_base}_mgmt_selected_tech": "",
            f"{self._state_key_base}_mgmt_target_category": "",
            f"{self._state_key_base}_mgmt_confirm_delete": False,
            f"{self._state_key_base}_mgmt_delete_tech": "",
            # Estados para duplicados
            f"{self._state_key_base}_duplicates_to_delete": [],
            f"{self._state_key_base}_batch_operation_type": "none"
        }
        
        # Solo inicializar si no existen
        for key, default_value in state_keys.items():
            if key not in st.session_state:
                st.session_state[key] = default_value
    
    def _get_cached_data(self, key: str, fetch_function, *args, **kwargs):
        """Obtiene datos del cache local o los obtiene si no existen/expiraron"""
        current_time = time.time()
        
        # Verificar si tenemos cache v√°lido
        if (key in self._local_cache and 
            key in self._cache_timestamp and 
            current_time - self._cache_timestamp[key] < self._cache_ttl):
            return self._local_cache[key]
        
        # Obtener datos frescos
        try:
            data = fetch_function(*args, **kwargs)
            self._local_cache[key] = data
            self._cache_timestamp[key] = current_time
            return data
        except Exception as e:
            st.error(f"Error obteniendo datos: {str(e)}")
            return self._local_cache.get(key, [])
    
    def _invalidate_cache(self):
        """Invalida el cache local"""
        self._local_cache.clear()
        self._cache_timestamp.clear()
    
    def _safe_float_format(self, value, format_type="float", format_str=".2f", default="0.00"):
        """
        Formatea un valor como float de forma segura - VERSI√ìN UNIFICADA
        
        Args:
            value: Valor a formatear
            format_type: Tipo de formato ("float", "percent", "int")
            format_str: String de formato (ej: ".2f")
            default: Valor por defecto si hay error
        """
        try:
            if value is None:
                return default
            
            if isinstance(value, Decimal):
                numeric_value = float(value)
            elif isinstance(value, str):
                clean_value = value.replace(',', '').replace('%', '').strip()
                numeric_value = float(clean_value) if clean_value else 0.0
            elif isinstance(value, (int, float)):
                numeric_value = float(value)
            else:
                return str(value)
            
            if math.isnan(numeric_value) or math.isinf(numeric_value):
                return default
            
            # Aplicar formato seg√∫n tipo
            if format_type == "percent":
                return f"{numeric_value * 100:.1f}%"
            elif format_type == "int":
                return str(int(numeric_value))
            else:  # format_type == "float" o cualquier otro
                return f"{numeric_value:{format_str}}"
                
        except (ValueError, TypeError, decimal.InvalidOperation):
            return default
    
    def _safe_int_format(self, value, default=0):
        """
        Convierte un valor a int de forma segura
        """
        try:
            if isinstance(value, Decimal):
                return int(value)
            elif isinstance(value, (int, float)):
                return int(value)
            elif isinstance(value, str):
                return int(float(value.replace(',', '')))
            elif value is None:
                return default
            else:
                return default
        except (ValueError, TypeError, decimal.InvalidOperation):
            return default
    
    def show_admin_interface(self):
        """Muestra la interfaz principal de administraci√≥n OPTIMIZADA"""
        st.header("üè∑Ô∏è Administraci√≥n de Categor√≠as - Hype Cycle")
        
        st.write("""
        Gestiona las tecnolog√≠as analizadas por categor√≠a y visualiza su posici√≥n 
        en el Hype Cycle de Gartner. **Versi√≥n optimizada para mejor rendimiento.**
        """)
        
        # Pesta√±as principales - AMPLIADAS
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä Vista por Categor√≠as",
            "üéØ Gr√°fica Hype Cycle", 
            "üè∑Ô∏è Gesti√≥n de Categor√≠as",  # NUEVA PESTA√ëA
            "‚öôÔ∏è Gesti√≥n Avanzada",
            "üßπ Limpieza de Datos"
        ])
        
        with tab1:
            self._show_category_overview_optimized()
        
        with tab2:
            self._show_hype_cycle_chart_optimized()
        
        with tab3:
            self._show_category_management()  # NUEVA FUNCI√ìN
        
        with tab4:
            self._show_advanced_management_optimized()
        
        with tab5:
            self._show_data_cleanup()
    
    def _show_category_overview_optimized(self):
        """OPTIMIZADA: Vista general de categor√≠as y tecnolog√≠as"""
        st.subheader("üìã Vista General por Categor√≠as")
        
        # Obtener categor√≠as con cache
        categories = self._get_cached_data(
            "categories",
            lambda: self.storage.storage.get_all_categories()
        )
        
        if not categories:
            st.info("No hay categor√≠as disponibles. Crea una nueva categor√≠a en la pesta√±a de an√°lisis.")
            return
        
        # Obtener todas las consultas con cache
        all_queries = self._get_cached_data(
            "all_queries",
            lambda: self.storage.get_all_hype_cycle_queries()
        )
        
        # Mostrar estad√≠sticas generales
        total_queries = len(all_queries)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de Tecnolog√≠as", total_queries)
        with col2:
            if all_queries:
                phases = [q.get("hype_metrics", {}).get("phase", "Unknown") for q in all_queries]
                most_common = max(set(phases), key=phases.count) if phases else "N/A"
                st.metric("Fase M√°s Com√∫n", most_common)
        with col3:
            current_month = datetime.now().strftime("%Y-%m")
            recent = len([q for q in all_queries if q.get("execution_date", "").startswith(current_month)])
            st.metric("Analizadas Este Mes", recent)
        
        # Procesar cada categor√≠a (optimizado)
        category_data = []
        for category in categories:
            category_id = category.get("category_id") or category.get("id")
            category_name = category.get("name", "Sin nombre")
            
            # Filtrar consultas en memoria (m√°s r√°pido que consulta BD)
            queries = [q for q in all_queries if q.get("category_id") == category_id]
            
            if queries:
                category_data.append({
                    'category_id': category_id,
                    'category_name': category_name,
                    'queries': queries,
                    'query_count': len(queries)
                })
        
        # Ordenar por n√∫mero de consultas
        category_data.sort(key=lambda x: x['query_count'], reverse=True)
        
        # Mostrar categor√≠as con paginaci√≥n para mejor rendimiento
        categories_per_page = 5
        total_pages = math.ceil(len(category_data) / categories_per_page)
        
        if total_pages > 1:
            page = st.selectbox(
                f"P√°gina (mostrando {categories_per_page} categor√≠as por p√°gina)",
                options=list(range(1, total_pages + 1)),
                key=f"{self._state_key_base}_category_page"
            )
            start_idx = (page - 1) * categories_per_page
            end_idx = start_idx + categories_per_page
            page_categories = category_data[start_idx:end_idx]
        else:
            page_categories = category_data
        
        # Mostrar categor√≠as de la p√°gina actual
        for cat_data in page_categories:
            with st.expander(
                f"üìÅ **{cat_data['category_name']}** ({cat_data['query_count']} tecnolog√≠as)", 
                expanded=False
            ):
                self._show_category_details_optimized(
                    cat_data['category_id'], 
                    cat_data['category_name'], 
                    cat_data['queries']
                )
    
    def _show_category_details_optimized(self, category_id: str, category_name: str, queries: List[Dict]):
        """OPTIMIZADA: Muestra detalles de una categor√≠a espec√≠fica"""
        
        # Procesar datos de tecnolog√≠as (optimizado)
        tech_data = []
        phase_distribution = {}
        
        for query in queries:
            hype_metrics = query.get("hype_metrics", {})
            
            # Datos para tabla
            phase = hype_metrics.get("phase", "Unknown")
            phase_distribution[phase] = phase_distribution.get(phase, 0) + 1
            
            # Extraer nombre de tecnolog√≠a
            tech_name = (
                query.get("technology_name") or 
                query.get("name") or 
                query.get("search_query", "")[:30]
            )
            
            # Formatear fecha
            exec_date = query.get("execution_date", "")
            try:
                if exec_date:
                    formatted_date = datetime.fromisoformat(exec_date.replace('Z', '+00:00')).strftime("%Y-%m-%d")
                else:
                    formatted_date = "No disponible"
            except:
                formatted_date = exec_date[:10] if len(exec_date) >= 10 else "No disponible"
            
            # FORMATEO SEGURO DE M√âTRICAS
            confidence_raw = hype_metrics.get('confidence', 0)
            confidence_formatted = self._safe_float_format(confidence_raw, ".2f", "0.00")
            
            total_mentions_raw = hype_metrics.get('total_mentions', 0)
            total_mentions_formatted = self._safe_int_format(total_mentions_raw, 0)
            
            tech_data.append({
                "üî¨ Tecnolog√≠a": tech_name,
                "üìç Fase": phase,
                "üéØ Confianza": confidence_formatted,
                "‚è±Ô∏è Tiempo al Plateau": hype_metrics.get("time_to_plateau", "N/A"),
                "üìÖ √öltima Actualizaci√≥n": formatted_date,
                "üìä Menciones": total_mentions_formatted,
                "üÜî ID": query.get("query_id", query.get("analysis_id", ""))[:8]
            })
        
        # Mostrar tabla de tecnolog√≠as (limitada para rendimiento)
        if tech_data:
            # Limitar a 20 tecnolog√≠as para mejor rendimiento
            display_data = tech_data[:20]
            df = pd.DataFrame(display_data)
            st.dataframe(df, use_container_width=True, hide_index=True)
            
            if len(tech_data) > 20:
                st.info(f"Mostrando las primeras 20 de {len(tech_data)} tecnolog√≠as")
            
            # Estad√≠sticas de la categor√≠a
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write("**üìä Distribuci√≥n por Fases:**")
                for phase, count in list(phase_distribution.items())[:5]:  # Limitar a 5
                    percentage = (count / len(queries)) * 100
                    st.write(f"‚Ä¢ {phase}: {count} ({percentage:.1f}%)")
            
            with col2:
                # Tecnolog√≠a m√°s mencionada
                if tech_data:
                    try:
                        max_mentions = 0
                        most_mentioned = tech_data[0]
                        
                        for tech in tech_data:
                            mentions = self._safe_int_format(tech["üìä Menciones"], 0)
                            if mentions > max_mentions:
                                max_mentions = mentions
                                most_mentioned = tech
                        
                        st.write("**üî• M√°s Mencionada:**")
                        st.write(f"‚Ä¢ {most_mentioned['üî¨ Tecnolog√≠a'][:20]}...")
                        st.write(f"‚Ä¢ {max_mentions} menciones")
                    except:
                        st.write("**üî• M√°s Mencionada:**")
                        st.write("‚Ä¢ Error calculando")
            
            with col3:
                # Fecha m√°s reciente
                try:
                    most_recent = max(tech_data, key=lambda x: x["üìÖ √öltima Actualizaci√≥n"])
                    st.write("**üïí M√°s Reciente:**")
                    st.write(f"‚Ä¢ {most_recent['üî¨ Tecnolog√≠a'][:20]}...")
                    st.write(f"‚Ä¢ {most_recent['üìÖ √öltima Actualizaci√≥n']}")
                except:
                    st.write("**üïí M√°s Reciente:**")
                    st.write("‚Ä¢ Error calculando")
        
        # BOTONES CON KEYS ESTABLES (optimizados)
        st.write("---")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            chart_button_key = f"{self._state_key_base}_chart_btn_{category_id}"
            
            if st.button(f"üìä Ver Gr√°fica", key=chart_button_key, type="primary"):
                # Establecer la categor√≠a seleccionada en estados estables
                st.session_state[f"{self._state_key_base}_selected_category_for_chart"] = category_id
                st.session_state[f"{self._state_key_base}_chart_category_name"] = category_name
                
                # Incrementar trigger para forzar actualizaci√≥n
                current_trigger = st.session_state.get(f"{self._state_key_base}_refresh_trigger", 0)
                st.session_state[f"{self._state_key_base}_refresh_trigger"] = current_trigger + 1
                
                st.success(f"‚úÖ Categor√≠a '{category_name}' seleccionada para visualizaci√≥n.")
                st.info("üëÜ **Haz clic en la pesta√±a 'üéØ Gr√°fica Hype Cycle' arriba para ver la gr√°fica.**")
        
        with col2:
            export_button_key = f"{self._state_key_base}_export_btn_{category_id}"
            if st.button(f"üì§ Exportar CSV", key=export_button_key):
                self._export_category_data(category_name, tech_data)
        
        with col3:
            update_button_key = f"{self._state_key_base}_update_btn_{category_id}"
            if st.button(f"üîÑ Actualizar Cache", key=update_button_key):
                self._invalidate_cache()
                st.success("‚úÖ Cache actualizado")
                st.rerun()
        
        with col4:
            copy_button_key = f"{self._state_key_base}_copy_btn_{category_id}"
            if st.button(f"üìã Copiar IDs", key=copy_button_key):
                ids = [item["üÜî ID"] for item in tech_data[:10]]  # Solo primeros 10
                st.code(", ".join(ids))
    
    def _show_hype_cycle_chart_optimized(self):
        """OPTIMIZADA: Muestra la gr√°fica principal del Hype Cycle"""
        st.subheader("üéØ Gr√°fica del Hype Cycle por Categor√≠as")
        
        st.write("""
        **Visualizaci√≥n profesional del Hype Cycle de Gartner optimizada para presentaciones.**  
        Versi√≥n optimizada para mejor rendimiento y menor tiempo de carga.
        """)
        
        # Obtener categor√≠as con cache
        categories = self._get_cached_data(
            "categories_chart",
            lambda: self.storage.storage.get_all_categories()
        )
        
        if not categories:
            st.warning("No hay categor√≠as disponibles para mostrar.")
            return
        
        # Preparar opciones de categor√≠as (optimizado)
        category_options = {}
        for cat in categories:
            cat_id = cat.get("category_id") or cat.get("id")
            cat_name = cat.get("name", "Sin nombre")
            
            # Solo incluir categor√≠as que tengan consultas (check r√°pido en cache)
            all_queries = self._get_cached_data(
                "all_queries_chart",
                lambda: self.storage.get_all_hype_cycle_queries()
            )
            
            queries = [q for q in all_queries if q.get("category_id") == cat_id]
            if queries:
                category_options[cat_name] = cat_id
        
        if not category_options:
            st.info("No hay categor√≠as con tecnolog√≠as analizadas para mostrar en la gr√°fica.")
            return
        
        # SELECTBOX CON KEY ESTABLE
        chart_category_selector_key = f"{self._state_key_base}_chart_category_selector"
        
        # Determinar √≠ndice basado en categor√≠a preseleccionada
        selected_category_id = st.session_state.get(f"{self._state_key_base}_selected_category_for_chart")
        selected_category_name_saved = st.session_state.get(f"{self._state_key_base}_chart_category_name")
        
        try:
            if selected_category_name_saved and selected_category_name_saved in category_options.keys():
                default_index = list(category_options.keys()).index(selected_category_name_saved)
            elif selected_category_id and selected_category_id in category_options.values():
                # Encontrar el nombre correspondiente al ID
                found_name = None
                for name, cat_id in category_options.items():
                    if cat_id == selected_category_id:
                        found_name = name
                        break
                
                if found_name:
                    default_index = list(category_options.keys()).index(found_name)
                else:
                    default_index = 0
            else:
                default_index = 0
        except:
            default_index = 0
        
        # Interfaz de control
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            # Selector de categor√≠a con estado estable
            selected_category_name = st.selectbox(
                "üè∑Ô∏è Selecciona una categor√≠a para visualizar:",
                options=list(category_options.keys()),
                index=default_index,
                key=chart_category_selector_key
            )
        
        with col2:
            # Opciones de visualizaci√≥n con keys estables
            show_labels_key = f"{self._state_key_base}_show_labels"
            show_labels = st.checkbox(
                "üìù Etiquetas", 
                value=st.session_state.get(f"{self._state_key_base}_chart_show_labels", True),
                key=show_labels_key
            )
            st.session_state[f"{self._state_key_base}_chart_show_labels"] = show_labels
        
        with col3:
            show_confidence_key = f"{self._state_key_base}_show_confidence"
            show_confidence = st.checkbox(
                "üéØ Confianza", 
                value=st.session_state.get(f"{self._state_key_base}_chart_show_confidence", False),
                key=show_confidence_key
            )
            st.session_state[f"{self._state_key_base}_chart_show_confidence"] = show_confidence
        
        # Actualizar estados si hay cambio de categor√≠a
        current_selected_id = category_options[selected_category_name]
        if current_selected_id != selected_category_id:
            st.session_state[f"{self._state_key_base}_selected_category_for_chart"] = current_selected_id
            st.session_state[f"{self._state_key_base}_chart_category_name"] = selected_category_name
        
        # Obtener tecnolog√≠as de la categor√≠a seleccionada (desde cache)
        all_queries = self._get_cached_data(
            f"queries_cat_{current_selected_id}",
            lambda: [q for q in self._get_cached_data("all_queries_chart", lambda: self.storage.get_all_hype_cycle_queries()) 
                    if q.get("category_id") == current_selected_id]
        )
        
        active_queries = [q for q in all_queries if q.get("is_active", True)]
        
        if not active_queries:
            st.warning(f"No hay tecnolog√≠as activas en la categor√≠a '{selected_category_name}'")
            return
        
        # Informaci√≥n previa a la gr√°fica con formateo seguro
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üî¨ Tecnolog√≠as", len(active_queries))
        
        with col2:
            # Fase m√°s com√∫n
            phases = [q.get("hype_metrics", {}).get("phase", "Unknown") for q in active_queries]
            if phases:
                most_common_phase = max(set(phases), key=phases.count)
                st.metric("üìç Fase Dominante", most_common_phase)
        
        with col3:
            # Confianza promedio con formateo seguro
            confidences = []
            for q in active_queries:
                conf_raw = q.get("hype_metrics", {}).get("confidence", 0)
                conf_float = self._safe_float_format(conf_raw, "", "0")
                try:
                    confidences.append(float(conf_float))
                except:
                    confidences.append(0.0)
            
            if confidences:
                avg_confidence = sum(confidences) / len(confidences)
                st.metric("üéØ Confianza Promedio", self._safe_float_format(avg_confidence, ".2f"))
        
        # Generar y mostrar gr√°fica (optimizada)
        try:
            with st.spinner(f"üé® Generando visualizaci√≥n para {len(active_queries)} tecnolog√≠as..."):
                # Limitar a 30 tecnolog√≠as para mejor rendimiento
                limited_queries = active_queries[:30] if len(active_queries) > 30 else active_queries
                
                fig = self._create_hype_cycle_chart_optimized(
                    limited_queries, 
                    selected_category_name,
                    show_labels=show_labels,
                    show_confidence=show_confidence
                )
            
            if fig and len(fig.data) > 0:
                # KEY ESTABLE para el gr√°fico
                chart_plot_key = f"{self._state_key_base}_chart_plot_{current_selected_id}"
                
                # Mostrar la gr√°fica con configuraci√≥n optimizada
                st.plotly_chart(
                    fig, 
                    use_container_width=True,
                    key=chart_plot_key,
                    config={
                        'displayModeBar': True,
                        'displaylogo': False,
                        'modeBarButtonsToAdd': ['downloadSvg'],
                        'modeBarButtonsToRemove': ['select2d', 'lasso2d', 'autoScale2d'],
                        'toImageButtonOptions': {
                            'format': 'png',
                            'filename': f'hype_cycle_{selected_category_name}',
                            'height': 750,
                            'width': 1200,
                            'scale': 2
                        }
                    }
                )
                
                if len(active_queries) > 30:
                    st.info(f"Mostrando las primeras 30 de {len(active_queries)} tecnolog√≠as para mejor rendimiento")
                
                # Mostrar leyenda de la gr√°fica (simplificada)
                self._show_chart_legend_optimized(limited_queries)
            
            else:
                st.error("‚ùå Error: La gr√°fica est√° vac√≠a o no se pudo generar")
                
        except Exception as e:
            st.error(f"‚ùå Error generando la gr√°fica: {str(e)}")
    
    def _create_hype_cycle_chart_optimized(self, queries: List[Dict], category_name: str, 
                    show_labels: bool = True, show_confidence: bool = False) -> go.Figure:
        """
        VERSI√ìN PROFESIONAL: Crea la gr√°fica del Hype Cycle estilo Gartner con nombres completos
        Optimizada para presentaciones internacionales sin cruces de l√≠neas
        """
        # Crear figura con dimensiones profesionales
        fig = go.Figure()
        
        # Curva AMPLIADA para usar TODO EL ESPACIO VISUAL disponible
        x_curve = np.linspace(10, 90, 500)  # Curva m√°s centrada pero amplia
        
        # Curva M√ÅS GRANDE y PRONUNCIADA para aprovechar todo el espacio
        # Innovation Trigger - m√°s alto y visible
        trigger = 40 * np.exp(-((x_curve - 20)/8)**2)
        
        # Peak - MUY ALTO para usar todo el espacio vertical
        peak = 120 * np.exp(-((x_curve - 35)/12)**2)
        
        # Trough - M√ÅS PROFUNDO para contraste dram√°tico  
        trough = -60 * np.exp(-((x_curve - 55)/15)**2)
        
        # Slope - gradual y amplio
        slope_rise = 35 * (1 / (1 + np.exp(-(x_curve - 70)/8)))
        
        # Plateau - alto y extendido
        plateau = 45 * (1 / (1 + np.exp(-(x_curve - 80)/6)))
        
        baseline = 40  # L√≠nea base m√°s alta para mejor visibilidad
        y_curve = baseline + trigger + peak + trough + slope_rise + plateau
        
        # Suavizar la curva
        if SCIPY_AVAILABLE:
            y_curve = gaussian_filter1d(y_curve, sigma=1.5)
        else:
            window = 5
            y_smooth = np.convolve(y_curve, np.ones(window)/window, mode='same')
            y_curve = y_smooth
        
        # Rango AMPLIO para usar todo el espacio vertical disponible
        y_curve = np.clip(y_curve, 10, 140)
        
        # Funci√≥n optimizada para posici√≥n exacta en la curva AMPLIADA
        def get_exact_position_on_curve(x_pos):
            if x_pos < 10 or x_pos > 90:
                return None
            # Mapear x_pos al √≠ndice correcto en la curva ampliada
            idx = int((x_pos - 10) * (len(x_curve) - 1) / 80)
            idx = min(max(idx, 0), len(y_curve) - 1)
            return float(x_curve[idx]), float(y_curve[idx])
        
        # A√±adir curva principal que usa TODO EL ESPACIO VISUAL
        fig.add_trace(go.Scatter(
            x=x_curve, 
            y=y_curve,
            mode='lines',
            name='Hype Cycle',
            line=dict(
                color='#2E86AB',
                width=8,  # L√≠nea M√ÅS gruesa para mejor visibilidad
                shape='spline',
                smoothing=1.3
            ),
            showlegend=False,
            hoverinfo='skip'
        ))
        
        # Zonas REAJUSTADAS para la curva m√°s amplia y centrada
        phase_positions = {
            "Innovation Trigger": {
                "x_range": list(range(15, 27, 2)),  # Ajustado a la nueva curva
                "label_zones": {
                    "top": list(range(160, 190, 8)),
                    "bottom": list(range(-40, -70, -8))
                }
            },
            "Peak of Inflated Expectations": {
                "x_range": list(range(28, 45, 1)),  # Rango amplio para el pico alto
                "label_zones": {
                    "top": list(range(170, 220, 6)),
                    "upper": list(range(155, 195, 6)),
                    "side_right": list(range(150, 180, 6)),
                    "side_left": list(range(150, 180, 6))
                }
            },
            "Trough of Disillusionment": {
                "x_range": list(range(47, 65, 3)),  # Ajustado al valle profundo
                "label_zones": {
                    "bottom": list(range(-50, -100, -10)),
                    "side": list(range(15, 45, 8))
                }
            },
            "Slope of Enlightenment": {
                "x_range": list(range(66, 78, 2)),  # En la pendiente
                "label_zones": {
                    "top": list(range(160, 190, 8)),
                    "side": list(range(120, 150, 6))
                }
            },
            "Plateau of Productivity": {
                "x_range": list(range(79, 88, 2)),  # En la meseta alta
                "label_zones": {
                    "top": list(range(165, 195, 8)),
                    "side": list(range(130, 160, 5))
                }
            }
        }
        
        # Procesar y organizar tecnolog√≠as estilo Gartner profesional
        technologies = []
        tech_by_phase = {}
        
        # PASO 1: Crear lista b√°sica y agrupar por fases
        for i, query in enumerate(queries):
            try:
                if not isinstance(query, dict):
                    continue
                    
                hype_metrics = query.get("hype_metrics", {})
                if not isinstance(hype_metrics, dict):
                    hype_metrics = {}
                
                phase = hype_metrics.get("phase", "Unknown")
                
                # Formateo seguro
                confidence = float(self._safe_float_format(hype_metrics.get("confidence", 0.5), "", "0.5"))
                total_mentions = self._safe_int_format(hype_metrics.get("total_mentions", 0), 0)
                
                # Extraer nombre COMPLETO de la tecnolog√≠a
                tech_name = (
                    query.get("technology_name") or 
                    query.get("name") or 
                    query.get("search_query", f"Tecnolog√≠a_{i}")
                )
                
                # NO truncar el nombre - mostrar completo
                if len(tech_name) > 50:
                    # Solo si es excesivamente largo, hacer smart truncate
                    words = tech_name.split()
                    if len(words) > 6:
                        tech_name = " ".join(words[:6]) + "..."
                
                time_to_plateau = hype_metrics.get("time_to_plateau", "N/A")
                sentiment_avg = float(self._safe_float_format(hype_metrics.get("sentiment_avg", 0), "", "0.0"))
                
                tech_info = {
                    "name": tech_name,
                    "phase": phase,
                    "confidence": confidence,
                    "query_id": query.get("query_id", f"query_{i}"),
                    "time_to_plateau": time_to_plateau,
                    "total_mentions": total_mentions,
                    "sentiment_avg": sentiment_avg,
                    "original_index": i
                }
                
                technologies.append(tech_info)
                
                # Agrupar por fase
                if phase not in tech_by_phase:
                    tech_by_phase[phase] = []
                tech_by_phase[phase].append(tech_info)
                
            except Exception as e:
                continue
        
        # PASO 2: Asignar posiciones inteligentes en la curva y calcular etiquetas
        positioned_technologies = []
        
        for phase, techs in tech_by_phase.items():
            if phase not in phase_positions or not techs:
                continue
                
            phase_config = phase_positions[phase]
            x_positions = phase_config["x_range"]
            
            # Distribuir tecnolog√≠as a lo largo de la fase
            for i, tech in enumerate(techs):
                if i < len(x_positions):
                    x_pos = x_positions[i]
                else:
                    # Para tecnolog√≠as extra, interpolar posiciones
                    base_idx = i % len(x_positions)
                    offset = (i // len(x_positions)) * 0.5
                    x_pos = x_positions[base_idx] + offset
                
                # Obtener posici√≥n exacta sobre la curva
                exact_x, exact_y = get_exact_position_on_curve(x_pos)
                
                tech["position_x"] = exact_x
                tech["position_y"] = exact_y
                
                positioned_technologies.append(tech)
        
        # PASO 3: A√±adir puntos de tecnolog√≠as
        for tech in positioned_technologies:
            # Tama√±o del punto basado en importancia
            base_size = 12
            confidence_factor = tech["confidence"] * 5
            mentions_factor = min(tech["total_mentions"] / 200, 4)
            size = base_size + confidence_factor + mentions_factor
            
            color = self._get_color_for_time_to_plateau(tech["time_to_plateau"])
            
            # Punto exactamente sobre la curva
            fig.add_trace(go.Scatter(
                x=[tech["position_x"]],
                y=[tech["position_y"]],
                mode='markers',
                name=tech["name"],
                marker=dict(
                    size=size,
                    color=color,
                    symbol='circle',
                    line=dict(color='white', width=2),
                    opacity=0.95
                ),
                hovertemplate=f"""
                    <b>{tech['name']}</b><br>
                    Fase: {tech['phase']}<br>
                    Confianza: {tech['confidence']:.1%}<br>
                    Tiempo al Plateau: {tech['time_to_plateau']}<br>
                    Menciones: {tech['total_mentions']:,}<br>
                    <extra></extra>
                """,
                showlegend=False
            ))
        
        # PASO 4: ALGORITMO PROFESIONAL DE ETIQUETADO SIN CRUCES
        if show_labels and positioned_technologies:
            self._add_professional_labels_no_crossing(fig, positioned_technologies, tech_by_phase, phase_positions)
        
        # RESTAURAR Etiquetas de fases en la parte inferior 
        phase_labels = [
            {"name": "Innovation<br>Trigger", "x": 21, "y": -25},  # Ajustado a nueva curva
            {"name": "Peak of Inflated<br>Expectations", "x": 36, "y": -25},   # Centrado en el pico
            {"name": "Trough of<br>Disillusionment", "x": 56, "y": -25},  # Centrado en el valle
            {"name": "Slope of<br>Enlightenment", "x": 72, "y": -25},     # En la pendiente
            {"name": "Plateau of<br>Productivity", "x": 83, "y": -25}     # En la meseta
        ]
        
        for label in phase_labels:
            fig.add_annotation(
                x=label["x"], 
                y=label["y"],
                text=f"<b>{label['name']}</b>",
                showarrow=False,
                font=dict(size=12, color='#34495e', family="Arial Black"),
                bgcolor='rgba(255,255,255,0.95)',
                bordercolor='#bdc3c7',
                borderwidth=1,
                borderpad=6,
                xanchor='center',
                yanchor='top',
                opacity=0.95
            )
        
        # RESTAURAR Leyenda de tiempo al plateau (que se hab√≠a perdido)
        legend_items = [
            {"label": "Ya alcanzado", "color": "#27AE60"},
            {"label": "< 2 a√±os", "color": "#3498DB"},
            {"label": "2-5 a√±os", "color": "#F39C12"},
            {"label": "5-10 a√±os", "color": "#E67E22"},
            {"label": "> 10 a√±os", "color": "#E74C3C"}
        ]
        
        for item in legend_items:
            fig.add_trace(go.Scatter(
                x=[None], y=[None],
                mode='markers',
                marker=dict(size=14, color=item["color"]),
                name=item["label"],
                showlegend=True
            ))
        
        # Layout CORREGIDO para curva m√°s grande y visible
        fig.update_layout(
            title=dict(
                text=f"<b>Hype Cycle - {category_name}</b><br><sub>({len(positioned_technologies)} tecnolog√≠as analizadas)</sub>",
                x=0.5,
                font=dict(size=22, color='#2C3E50', family="Arial Black")
            ),
            xaxis=dict(
                title=dict(
                    text="<b>TIEMPO</b>",
                    font=dict(size=16, color='#34495e', family="Arial Black")
                ),
                showgrid=False,
                showticklabels=False,
                zeroline=False,
                range=[5, 95],  # Rango ajustado para curva m√°s centrada y grande
                showline=True,
                linecolor='#7f8c8d',
                linewidth=3
            ),
            yaxis=dict(
                title=dict(
                    text="<b>EXPECTATIVAS</b>",
                    font=dict(size=16, color='#34495e', family="Arial Black")
                ),
                showgrid=False,
                showticklabels=False,
                zeroline=False,
                range=[-45, 235],  # Rango optimizado para curva m√°s grande
                showline=True,
                linecolor='#7f8c8d',
                linewidth=3
            ),
            plot_bgcolor='white',
            paper_bgcolor='white',
            height=950,  # Altura optimizada
            width=1700,  # Ancho optimizado
            showlegend=True,
            font=dict(family="Arial"),
            margin=dict(t=140, l=80, r=220, b=120),  # M√°rgenes optimizados
            hovermode='closest',
            legend=dict(
                title=dict(
                    text="<b>Tiempo al Plateau</b>",
                    font=dict(size=13, color="#2C3E50", family="Arial Black")
                ),
                orientation="v",
                yanchor="top",
                y=0.98,
                xanchor="left",
                x=1.01,  # Posici√≥n ajustada
                bgcolor='rgba(255,255,255,0.98)',
                bordercolor='#bdc3c7',
                borderwidth=2,
                font=dict(size=11, color="#2C3E50"),
                itemsizing="constant"
            )
        )
        
        return fig

    def _add_professional_labels_no_crossing(self, fig, technologies, tech_by_phase, phase_positions):
        """
        ALGORITMO INTELIGENTE: Evita superposiciones y cruces de l√≠neas
        Usa detecci√≥n de colisiones y l√≠neas optimizadas
        """
        
        # Procesar cada fase con estrategia anti-colisi√≥n
        for phase, techs in tech_by_phase.items():
            if not techs or phase not in phase_positions:
                continue
                
            if phase == "Peak of Inflated Expectations":
                # Estrategia especial para el pico - con detecci√≥n de colisiones
                self._add_peak_smart_no_overlap(fig, techs)
                
            elif phase == "Innovation Trigger":
                # Etiquetas organizadas sin superposici√≥n
                self._add_organized_trigger_labels(fig, techs)
                
            elif phase == "Trough of Disillusionment":
                # Etiquetas del valle organizadas
                self._add_organized_trough_labels(fig, techs)
                
            elif phase == "Slope of Enlightenment":
                # Etiquetas de la pendiente organizadas
                self._add_organized_slope_labels(fig, techs)
                
            elif phase == "Plateau of Productivity":
                # Etiquetas del plateau organizadas
                self._add_organized_plateau_labels(fig, techs)

    def _add_peak_smart_no_overlap(self, fig, techs):
        """
        ALGORITMO ANTI-COLISI√ìN para el pico congestionado
        Usa zones predefinidas y detecci√≥n de superposiciones
        """
        # Ordenar por posici√≥n X
        sorted_techs = sorted(techs, key=lambda t: t["position_x"])
        
        # Definir ZONES espec√≠ficas para evitar superposiciones
        zones = {
            "top_left": {"x_range": (15, 30), "y_range": (180, 220), "capacity": 4},
            "top_center": {"x_range": (30, 45), "y_range": (200, 235), "capacity": 5},
            "top_right": {"x_range": (45, 60), "y_range": (180, 220), "capacity": 4},
            "middle_left": {"x_range": (10, 25), "y_range": (160, 180), "capacity": 3},
            "middle_right": {"x_range": (50, 65), "y_range": (160, 180), "capacity": 3},
            "side_left": {"x_range": (5, 20), "y_range": (140, 160), "capacity": 3},
            "side_right": {"x_range": (55, 70), "y_range": (140, 160), "capacity": 3}
        }
        
        # Asignar tecnolog√≠as a zones sin superposici√≥n
        zone_assignments = {}
        zone_usage = {zone: 0 for zone in zones.keys()}
        
        for i, tech in enumerate(sorted_techs):
            # Encontrar la zone m√°s apropiada y disponible
            best_zone = None
            min_distance = float('inf')
            
            for zone_name, zone_info in zones.items():
                if zone_usage[zone_name] < zone_info["capacity"]:
                    # Calcular distancia al centro de la zone
                    zone_center_x = (zone_info["x_range"][0] + zone_info["x_range"][1]) / 2
                    zone_center_y = (zone_info["y_range"][0] + zone_info["y_range"][1]) / 2
                    
                    distance = ((tech["position_x"] - zone_center_x)**2 + 
                            (tech["position_y"] - zone_center_y)**2)**0.5
                    
                    if distance < min_distance:
                        min_distance = distance
                        best_zone = zone_name
            
            if best_zone:
                zone_assignments[tech["name"]] = best_zone
                zone_usage[best_zone] += 1
            else:
                # Fallback: usar zone con menos uso
                best_zone = min(zone_usage.keys(), key=lambda k: zone_usage[k])
                zone_assignments[tech["name"]] = best_zone
                zone_usage[best_zone] += 1
        
        # Posicionar etiquetas en sus zones asignadas
        zone_counters = {zone: 0 for zone in zones.keys()}
        
        for tech in sorted_techs:
            assigned_zone = zone_assignments.get(tech["name"])
            if not assigned_zone:
                continue
                
            zone_info = zones[assigned_zone]
            zone_counter = zone_counters[assigned_zone]
            
            # Calcular posici√≥n espec√≠fica dentro de la zone
            zone_width = zone_info["x_range"][1] - zone_info["x_range"][0]
            zone_height = zone_info["y_range"][1] - zone_info["y_range"][0]
            
            # Distribuci√≥n en grid dentro de la zone
            cols = 2 if zone_info["capacity"] > 3 else 1
            row = zone_counter // cols
            col = zone_counter % cols
            
            label_x = zone_info["x_range"][0] + (col + 0.5) * (zone_width / cols)
            label_y = zone_info["y_range"][0] + (row + 0.5) * (zone_height / max(1, zone_info["capacity"] // cols))
            
            zone_counters[assigned_zone] += 1
            
            color = self._get_color_for_time_to_plateau(tech["time_to_plateau"])
            
            # L√≠nea DIRECTA y CORTA - sin curvas innecesarias
            fig.add_shape(
                type="line",
                x0=tech["position_x"], 
                y0=tech["position_y"],
                x1=label_x, 
                y1=label_y,
                line=dict(
                    color=color,
                    width=1.5,
                    dash="solid"
                ),
                layer="below"
            )
            
            # Etiqueta optimizada
            fig.add_annotation(
                x=label_x,
                y=label_y,
                text=f'<b>{tech["name"]}</b>',
                showarrow=False,
                font=dict(size=10, color='#2C3E50', family="Arial"),
                bgcolor='rgba(255, 255, 255, 0.95)',
                bordercolor=color,
                borderwidth=1.5,
                borderpad=4,
                xanchor='center',
                yanchor='middle',
                opacity=0.98
            )

    def _add_organized_trough_labels(self, fig, techs):
        """
        Etiquetas ESTRAT√âGICAS para Trough - prioriza distancia M√ÅS CORTA
        """
        # Definir posiciones disponibles ordenadas por DISTANCIA desde el valle
        available_positions = []
        
        for tech in techs:
            # Generar posiciones candidatas ordenadas por distancia
            candidates = []
            
            # Posiciones CERCANAS abajo (prioridad 1)
            for offset_x in [-8, 0, 8]:
                for offset_y in [-25, -35, -45]:
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y, "bottom"))
            
            # Posiciones CERCANAS laterales (prioridad 2)
            for offset_x in [15, 25]:
                for offset_y in [-10, 0, 10]:
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y, "side"))
            
            # Solo si no hay opciones cercanas, usar posiciones lejanas
            for offset_x in [-15, -25]:
                for offset_y in [-10, 0, 10]:
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y, "far_side"))
            
            # Ordenar por distancia (m√°s cercano primero)
            candidates.sort(key=lambda x: x[0])
            available_positions.append((tech, candidates))
        
        # Asignar posiciones evitando superposiciones pero priorizando cercan√≠a
        used_positions = set()
        final_assignments = {}
        
        for tech, candidates in available_positions:
            best_position = None
            
            for distance, pos_x, pos_y, position_type in candidates:
                # Verificar si est√° muy cerca de una posici√≥n ya usada
                too_close = False
                for used_x, used_y in used_positions:
                    if ((pos_x - used_x)**2 + (pos_y - used_y)**2)**0.5 < 12:  # Distancia m√≠nima entre etiquetas
                        too_close = True
                        break
                
                if not too_close:
                    best_position = (pos_x, pos_y)
                    used_positions.add((pos_x, pos_y))
                    break
            
            if best_position:
                final_assignments[tech["name"]] = best_position
        
        # Renderizar etiquetas con posiciones optimizadas
        for tech in techs:
            if tech["name"] in final_assignments:
                label_x, label_y = final_assignments[tech["name"]]
                
                color = self._get_color_for_time_to_plateau(tech["time_to_plateau"])
                
                # L√≠nea CORTA y directa - solo la distancia necesaria
                fig.add_shape(
                    type="line", x0=tech["position_x"], y0=tech["position_y"],
                    x1=label_x, y1=label_y,
                    line=dict(color=color, width=1.5), layer="below"
                )
                
                fig.add_annotation(
                    x=label_x, y=label_y, text=f'<b>{tech["name"]}</b>',
                    showarrow=False, font=dict(size=10, color='#2C3E50', family="Arial"),
                    bgcolor='rgba(255, 255, 255, 0.95)', bordercolor=color,
                    borderwidth=1.5, borderpad=4, xanchor='center', yanchor='middle', opacity=0.98
                )

    def _add_organized_slope_labels(self, fig, techs):
        """
        Etiquetas ESTRAT√âGICAS para Slope - prioriza distancia M√ÅS CORTA
        """
        available_positions = []
        
        for tech in techs:
            candidates = []
            
            # Posiciones CERCANAS arriba (prioridad 1)
            for offset_x in [-8, 0, 8]:
                for offset_y in [25, 35, 45]:
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y, "top"))
            
            # Posiciones CERCANAS laterales (prioridad 2)
            for offset_x in [-15, -25]:
                for offset_y in [-8, 0, 8]:
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y, "left"))
            
            # Solo si necesario, posiciones m√°s lejanas
            for offset_x in [15, 25]:
                for offset_y in [-8, 0, 8]:
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y, "right"))
            
            candidates.sort(key=lambda x: x[0])
            available_positions.append((tech, candidates))
        
        # Asignar posiciones optimizadas
        used_positions = set()
        final_assignments = {}
        
        for tech, candidates in available_positions:
            best_position = None
            
            for distance, pos_x, pos_y, position_type in candidates:
                too_close = False
                for used_x, used_y in used_positions:
                    if ((pos_x - used_x)**2 + (pos_y - used_y)**2)**0.5 < 12:
                        too_close = True
                        break
                
                if not too_close:
                    best_position = (pos_x, pos_y)
                    used_positions.add((pos_x, pos_y))
                    break
            
            if best_position:
                final_assignments[tech["name"]] = best_position
        
        # Renderizar
        for tech in techs:
            if tech["name"] in final_assignments:
                label_x, label_y = final_assignments[tech["name"]]
                
                color = self._get_color_for_time_to_plateau(tech["time_to_plateau"])
                
                fig.add_shape(
                    type="line", x0=tech["position_x"], y0=tech["position_y"],
                    x1=label_x, y1=label_y,
                    line=dict(color=color, width=1.5), layer="below"
                )
                
                fig.add_annotation(
                    x=label_x, y=label_y, text=f'<b>{tech["name"]}</b>',
                    showarrow=False, font=dict(size=10, color='#2C3E50', family="Arial"),
                    bgcolor='rgba(255, 255, 255, 0.95)', bordercolor=color,
                    borderwidth=1.5, borderpad=4, xanchor='center', yanchor='middle', opacity=0.98
                )

    def _add_organized_trigger_labels(self, fig, techs):
        """
        Etiquetas ESTRAT√âGICAS para Innovation Trigger - prioriza distancia M√ÅS CORTA
        """
        available_positions = []
        
        for tech in techs:
            candidates = []
            
            # Posiciones CERCANAS (prioridad por distancia)
            for offset_x in [-8, 0, 8]:
                for offset_y in [25, -25, 35, -35]:  # Alternar arriba/abajo cercano
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y))
            
            # Solo si necesario, posiciones m√°s lejanas
            for offset_x in [-15, 15]:
                for offset_y in [45, -45]:
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y))
            
            candidates.sort(key=lambda x: x[0])
            available_positions.append((tech, candidates))
        
        # Asignar posiciones optimizadas
        used_positions = set()
        final_assignments = {}
        
        for tech, candidates in available_positions:
            best_position = None
            
            for distance, pos_x, pos_y in candidates:
                too_close = False
                for used_x, used_y in used_positions:
                    if ((pos_x - used_x)**2 + (pos_y - used_y)**2)**0.5 < 12:
                        too_close = True
                        break
                
                if not too_close:
                    best_position = (pos_x, pos_y)
                    used_positions.add((pos_x, pos_y))
                    break
            
            if best_position:
                final_assignments[tech["name"]] = best_position
        
        # Renderizar
        for tech in techs:
            if tech["name"] in final_assignments:
                label_x, label_y = final_assignments[tech["name"]]
                
                color = self._get_color_for_time_to_plateau(tech["time_to_plateau"])
                
                fig.add_shape(
                    type="line", x0=tech["position_x"], y0=tech["position_y"],
                    x1=label_x, y1=label_y,
                    line=dict(color=color, width=1.5), layer="below"
                )
                
                fig.add_annotation(
                    x=label_x, y=label_y, text=f'<b>{tech["name"]}</b>',
                    showarrow=False, font=dict(size=10, color='#2C3E50', family="Arial"),
                    bgcolor='rgba(255, 255, 255, 0.95)', bordercolor=color,
                    borderwidth=1.5, borderpad=4, xanchor='center', yanchor='middle', opacity=0.98
                )

    def _add_organized_plateau_labels(self, fig, techs):
        """
        Etiquetas ESTRAT√âGICAS para Plateau - prioriza distancia M√ÅS CORTA
        """
        available_positions = []
        
        for tech in techs:
            candidates = []
            
            # Solo posiciones arriba (caracter√≠stica del plateau) pero optimizadas por distancia
            for offset_x in [-8, 0, 8]:
                for offset_y in [25, 35, 45, 55]:
                    pos_x = tech["position_x"] + offset_x
                    pos_y = tech["position_y"] + offset_y
                    if 8 <= pos_x <= 92 and -35 <= pos_y <= 210:
                        distance = (offset_x**2 + offset_y**2)**0.5
                        candidates.append((distance, pos_x, pos_y))
            
            candidates.sort(key=lambda x: x[0])
            available_positions.append((tech, candidates))
        
        # Asignar posiciones optimizadas
        used_positions = set()
        final_assignments = {}
        
        for tech, candidates in available_positions:
            best_position = None
            
            for distance, pos_x, pos_y in candidates:
                too_close = False
                for used_x, used_y in used_positions:
                    if ((pos_x - used_x)**2 + (pos_y - used_y)**2)**0.5 < 12:
                        too_close = True
                        break
                
                if not too_close:
                    best_position = (pos_x, pos_y)
                    used_positions.add((pos_x, pos_y))
                    break
            
            if best_position:
                final_assignments[tech["name"]] = best_position
        
        # Renderizar
        for tech in techs:
            if tech["name"] in final_assignments:
                label_x, label_y = final_assignments[tech["name"]]
                
                color = self._get_color_for_time_to_plateau(tech["time_to_plateau"])
                
                fig.add_shape(
                    type="line", x0=tech["position_x"], y0=tech["position_y"],
                    x1=label_x, y1=label_y,
                    line=dict(color=color, width=1.5), layer="below"
                )
                
                fig.add_annotation(
                    x=label_x, y=label_y, text=f'<b>{tech["name"]}</b>',
                    showarrow=False, font=dict(size=10, color='#2C3E50', family="Arial"),
                    bgcolor='rgba(255, 255, 255, 0.95)', bordercolor=color,
                    borderwidth=1.5, borderpad=4, xanchor='center', yanchor='middle', opacity=0.98
                )



        # Etiquetas de fases REPOSICIONADAS para la curva extendida
        phase_labels = [
            {"name": "Innovation<br>Trigger", "x": 21, "y": -25},  # Ajustado a nueva curva
            {"name": "Peak of Inflated<br>Expectations", "x": 36, "y": -25},   # Centrado en el pico
            {"name": "Trough of<br>Disillusionment", "x": 56, "y": -25},  # Centrado en el valle
            {"name": "Slope of<br>Enlightenment", "x": 72, "y": -25},     # En la pendiente
            {"name": "Plateau of<br>Productivity", "x": 83, "y": -25}     # En la meseta
        ]
        
        for label in phase_labels:
            fig.add_annotation(
                x=label["x"], 
                y=label["y"],
                text=f"<b>{label['name']}</b>",
                showarrow=False,
                font=dict(size=11, color='#34495e', family="Arial Black"),
                bgcolor='rgba(255,255,255,0.95)',
                bordercolor='#bdc3c7',
                borderwidth=1,
                borderpad=6,
                xanchor='center',
                yanchor='top',
                opacity=0.95
            )
        
        # Leyenda de tiempo al plateau
        legend_items = [
            {"label": "Ya alcanzado", "color": "#27AE60"},
            {"label": "< 2 a√±os", "color": "#3498DB"},
            {"label": "2-5 a√±os", "color": "#F39C12"},
            {"label": "5-10 a√±os", "color": "#E67E22"},
            {"label": "> 10 a√±os", "color": "#E74C3C"}
        ]
        
        for item in legend_items:
            fig.add_trace(go.Scatter(
                x=[None], y=[None],
                mode='markers',
                marker=dict(size=12, color=item["color"]),
                name=item["label"],
                showlegend=True
            ))

    def _calculate_simple_label_position(self, point_x: float, point_y: float, index: int) -> tuple:
        """Calcula posici√≥n simple de etiqueta para mejor rendimiento"""
        # Estrategia simplificada basada en √≠ndice
        if index % 4 == 0:  # Arriba
            label_x = point_x + (index % 3 - 1) * 8
            label_y = point_y + 20 + (index % 2) * 10
        elif index % 4 == 1:  # Derecha
            label_x = point_x + 15 + (index % 2) * 8
            label_y = point_y + (index % 3 - 1) * 8
        elif index % 4 == 2:  # Abajo
            label_x = point_x + (index % 3 - 1) * 8
            label_y = point_y - 15 - (index % 2) * 8
        else:  # Izquierda
            label_x = point_x - 15 - (index % 2) * 8
            label_y = point_y + (index % 3 - 1) * 8
        
        # Mantener dentro de l√≠mites
        label_x = max(5, min(95, label_x))
        label_y = max(-25, min(105, label_y))
        
        return (label_x, label_y)

    def _get_color_for_time_to_plateau(self, time_estimate: str) -> str:
        """Colores optimizados para tiempo al plateau"""
        time_colors = {
            "already": "#27AE60",
            "<2": "#3498DB", 
            "2-5": "#F39C12",
            "5-10": "#E67E22",
            ">10": "#E74C3C",
            "unknown": "#95A5A6"
        }
        
        time_lower = str(time_estimate).lower()
        
        if any(x in time_lower for x in ["ya alcanzado", "already", "reached"]):
            return time_colors["already"]
        elif any(x in time_lower for x in ["<2", "menos de 2", "1-2"]):
            return time_colors["<2"]
        elif any(x in time_lower for x in ["2-5", "3-5", "2-4"]):
            return time_colors["2-5"]
        elif any(x in time_lower for x in ["5-10", "6-10", "5-8"]):
            return time_colors["5-10"]
        elif any(x in time_lower for x in [">10", "m√°s de 10", "10+"]):
            return time_colors[">10"]
        else:
            return time_colors["unknown"]
    
    def _show_chart_legend_optimized(self, queries: List[Dict]):
        """OPTIMIZADA: Muestra tabla explicativa simplificada"""
        st.subheader("üìã Tecnolog√≠as en la Gr√°fica")
        
        legend_data = []
        for query in queries[:15]:  # Limitar para mejor rendimiento
            hype_metrics = query.get("hype_metrics", {})
            
            tech_name = (
                query.get("technology_name") or 
                query.get("name") or 
                query.get("search_query", "")[:20]  # Limitado
            )
            
            confidence_formatted = self._safe_float_format(hype_metrics.get("confidence", 0), ".2f", "0.00")
            total_mentions_formatted = self._safe_int_format(hype_metrics.get("total_mentions", 0), 0)
            
            legend_data.append({
                "üî¨ Tecnolog√≠a": tech_name,
                "üìç Fase": hype_metrics.get("phase", "Unknown"),
                "üéØ Confianza": confidence_formatted,
                "‚è±Ô∏è Tiempo al Plateau": hype_metrics.get("time_to_plateau", "N/A"),
                "üìä Menciones": total_mentions_formatted
            })
        
        df_legend = pd.DataFrame(legend_data)
        st.dataframe(df_legend, use_container_width=True, hide_index=True)
        
        if len(queries) > 15:
            st.info(f"Mostrando las primeras 15 de {len(queries)} tecnolog√≠as")
    
    def _show_advanced_management_optimized(self):
        """OPTIMIZADA: Gesti√≥n avanzada con mejor rendimiento"""
        st.subheader("‚öôÔ∏è Gesti√≥n Avanzada")
        
        st.write("""
        Herramientas optimizadas para gestionar tecnolog√≠as: cambiar categor√≠as, 
        eliminar registros y realizar operaciones masivas.
        """)
        
        # Sub-pesta√±as para organizar mejor
        subtab1, subtab2, subtab3 = st.tabs([
            "üîÑ Mover Tecnolog√≠as", 
            "üóëÔ∏è Eliminar Registros",
            "üìä Operaciones Masivas"
        ])
        
        with subtab1:
            self._show_move_technologies_form()
        
        with subtab2:
            self._show_delete_technologies_form()
        
        with subtab3:
            self._show_massive_operations_optimized()
    
    def _show_move_technologies_form(self):
        """CORREGIDA: Formulario para mover tecnolog√≠as sin bloqueos"""
        st.write("### üîÑ Mover Tecnolog√≠as Entre Categor√≠as")
        
        # Obtener datos con cache
        all_queries = self._get_cached_data(
            "all_queries_move",
            lambda: self.storage.get_all_hype_cycle_queries()
        )
        
        categories = self._get_cached_data(
            "categories_move",
            lambda: self.storage.storage.get_all_categories()
        )
        
        if not all_queries:
            st.info("No hay tecnolog√≠as para mover.")
            return
        
        if len(categories) < 2:
            st.warning("Se necesitan al menos 2 categor√≠as para mover tecnolog√≠as.")
            return
        
        # USAR FORMULARIO SIN DISABLED PARA EVITAR BLOQUEOS
        with st.form(key=f"{self._state_key_base}_move_form_opt", clear_on_submit=False):
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.write("#### üî¨ Seleccionar Tecnolog√≠a")
                
                # Crear opciones simplificadas (limitadas para rendimiento)
                tech_options = []
                tech_data = {}
                
                for query in all_queries[:50]:  # Limitar para mejor rendimiento
                    query_id = query.get("query_id", query.get("analysis_id"))
                    tech_name = (
                        query.get("technology_name") or 
                        query.get("search_query", "")[:25] or 
                        "Sin nombre"
                    )
                    
                    # Obtener categor√≠a actual
                    current_cat_id = query.get("category_id", "unknown")
                    current_cat_name = "Sin categor√≠a"
                    for cat in categories:
                        if cat.get("category_id") == current_cat_id:
                            current_cat_name = cat.get("name", "Sin nombre")
                            break
                    
                    phase = query.get("hype_metrics", {}).get("phase", "Unknown")
                    display_name = f"{tech_name} | {current_cat_name} | {phase}"
                    
                    tech_options.append(display_name)
                    tech_data[display_name] = {
                        "query_id": query_id,
                        "tech_name": tech_name,
                        "current_cat_id": current_cat_id,
                        "current_cat_name": current_cat_name
                    }
                
                selected_tech_display = st.selectbox(
                    f"Tecnolog√≠a a mover (mostrando {len(tech_options)} de {len(all_queries)}):",
                    options=tech_options
                )
                
                selected_tech_info = tech_data[selected_tech_display]
            
            with col2:
                st.write("#### üéØ Nueva Categor√≠a")
                
                # Filtrar categor√≠as disponibles (excluir la actual)
                current_cat_id = selected_tech_info["current_cat_id"]
                available_categories = []
                category_data = {}
                
                for cat in categories:
                    if cat.get("category_id") != current_cat_id:
                        cat_name = cat.get("name", "Sin nombre")
                        available_categories.append(cat_name)
                        category_data[cat_name] = cat.get("category_id")
                
                if not available_categories:
                    st.warning("No hay otras categor√≠as disponibles.")
                    return
                
                target_category_name = st.selectbox(
                    "Nueva categor√≠a:",
                    options=available_categories
                )
                
                target_category_id = category_data[target_category_name]
                
                # Mostrar resumen del movimiento
                st.info(f"""
                **Movimiento a realizar:**
                
                üî¨ **Tecnolog√≠a:** {selected_tech_info['tech_name']}
                üìÅ **De:** {selected_tech_info['current_cat_name']}
                üìÅ **A:** {target_category_name}
                """)
            
            # Controles del formulario
            st.write("---")
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                confirm_move = st.checkbox("‚úÖ Confirmar movimiento")
                if not confirm_move:
                    st.warning("‚ö†Ô∏è Marca la casilla para habilitar el movimiento")
            
            with col2:
                # BOT√ìN SIN DISABLED - Validaci√≥n despu√©s del submit
                submitted = st.form_submit_button(
                    "üîÑ EJECUTAR MOVIMIENTO", 
                    type="primary"
                )
            
            # Procesar cuando se env√≠a el formulario
            if submitted:
                if not confirm_move:
                    st.error("‚ùå Debes confirmar el movimiento marcando la casilla")
                else:
                    with st.spinner("Moviendo tecnolog√≠a..."):
                        # M√âTODO MEJORADO: Primero verificar que existe
                        query_to_move = selected_tech_info['query_id']
                        
                        # Debug: Mostrar informaci√≥n del item a mover
                        debug_info = self.storage.debug_query_ids(query_to_move)
                        
                        if debug_info.get('matching_items'):
                            # El item existe, proceder con movimiento
                            matching_item = debug_info['matching_items'][0]
                            st.info(f"üîç Item encontrado: {matching_item['tech_name']}")
                            
                            success = self.storage.move_technology_to_category(
                                query_to_move, 
                                target_category_id
                            )
                            
                            if success:
                                st.success(f"‚úÖ '{selected_tech_info['tech_name']}' movida exitosamente a '{target_category_name}'!")
                                
                                # Invalidar cache
                                self._invalidate_cache()
                                self.storage._invalidate_cache()
                                
                                # Limpiar cache de Streamlit
                                if hasattr(st, 'cache_data'):
                                    st.cache_data.clear()
                                
                                st.balloons()
                                time.sleep(1)
                                st.rerun()
                            else:
                                st.error("‚ùå Error moviendo la tecnolog√≠a. Revisa los logs.")
                                
                                # Mostrar informaci√≥n de debug
                                with st.expander("üîç Informaci√≥n de Debug del Error"):
                                    st.write("**Item que se intent√≥ mover:**")
                                    st.json(matching_item)
                                    
                                    st.write("**Informaci√≥n del movimiento:**")
                                    st.write(f"- ID usado: {query_to_move}")
                                    st.write(f"- Categor√≠a origen: {selected_tech_info['current_cat_id']}")
                                    st.write(f"- Categor√≠a destino: {target_category_id}")
                                    st.write(f"- Categor√≠a destino nombre: {target_category_name}")
                                    
                                    st.write("**Posibles causas:**")
                                    st.write("- Permisos insuficientes en DynamoDB")
                                    st.write("- Error en la actualizaci√≥n de claves")
                                    st.write("- Categor√≠a destino no v√°lida")
                                    
                                    # Bot√≥n para intentar con ID alternativo
                                    if len(debug_info['matching_items']) > 1:
                                        st.write("**IDs alternativos encontrados:**")
                                        for i, alt_item in enumerate(debug_info['matching_items'][1:], 1):
                                            if st.button(f"üîÑ Intentar con {alt_item['analysis_id'][:20]}...", key=f"{self._state_key_base}_alt_move_{i}"):
                                                alt_success = self.storage.move_technology_to_category(
                                                    alt_item['analysis_id'], 
                                                    target_category_id
                                                )
                                                if alt_success:
                                                    st.success("‚úÖ Movimiento exitoso con ID alternativo!")
                                                    st.rerun()
                                                else:
                                                    st.error("‚ùå Tambi√©n fall√≥ con ID alternativo")
                        else:
                            # El item no existe
                            st.error(f"‚ùå No se encontr√≥ el item con ID: {query_to_move}")
                            
                            with st.expander("üîç Informaci√≥n de Debug - Item No Encontrado"):
                                st.write(f"**ID buscado:** {query_to_move}")
                                st.write(f"**Total items en base:** {debug_info.get('total_items', 0)}")
                                
                                if debug_info.get('all_ids_sample'):
                                    st.write("**Muestra de IDs existentes:**")
                                    for sample in debug_info['all_ids_sample'][:5]:  # Solo primeros 5
                                        st.write(f"- query_id: {sample['query_id']}")
                                        st.write(f"  analysis_id: {sample['analysis_id']}")
                                        st.write(f"  tecnolog√≠a: {sample['tech_name']}")
                                        st.write("---")
                                
                                st.write("**Posibles soluciones:**")
                                st.write("1. Refrescar la p√°gina y volver a cargar")
                                st.write("2. Limpiar cache y recargar datos")
                                st.write("3. El item pudo haber sido eliminado por otro proceso")
                                st.write("4. Usar la herramienta de Debug de IDs en la pesta√±a Debug")
                                
                                # Bot√≥n para limpiar cache y recargar
                                if st.button("üîÑ Limpiar Cache y Recargar", key=f"{self._state_key_base}_debug_reload_move"):
                                    self._invalidate_cache()
                                    self.storage._invalidate_cache()
                                    if hasattr(st, 'cache_data'):
                                        st.cache_data.clear()
                                    st.rerun()
    
    def _show_delete_technologies_form(self):
        """CORREGIDA: Formulario para eliminar tecnolog√≠as sin bloqueos"""
        st.write("### üóëÔ∏è Eliminar Registros de Tecnolog√≠as")
        st.write("‚ö†Ô∏è **CUIDADO:** Esta acci√≥n no se puede deshacer.")
        
        # Obtener datos con cache
        all_queries = self._get_cached_data(
            "all_queries_delete",
            lambda: self.storage.get_all_hype_cycle_queries()
        )
        
        if not all_queries:
            st.info("No hay tecnolog√≠as para eliminar.")
            return
        
        # USAR FORMULARIO SIN DISABLED PARA EVITAR BLOQUEOS
        with st.form(key=f"{self._state_key_base}_delete_form_opt", clear_on_submit=False):
            st.write("#### üéØ Eliminar Tecnolog√≠a")
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                # Crear opciones para selectbox (limitadas)
                tech_delete_options = []
                tech_delete_data = {}
                
                for query in all_queries[:30]:  # Limitar para mejor rendimiento
                    query_id = query.get("query_id", query.get("analysis_id"))
                    tech_name = (
                        query.get("technology_name") or 
                        query.get("search_query", "")[:25] or 
                        "Sin nombre"
                    )
                    
                    # Obtener categor√≠a
                    cat_id = query.get("category_id", "unknown") 
                    cat_name = "Sin categor√≠a"
                    categories = self._get_cached_data(
                        "categories_delete",
                        lambda: self.storage.storage.get_all_categories()
                    )
                    for cat in categories:
                        if cat.get("category_id") == cat_id:
                            cat_name = cat.get("name", "Sin nombre")
                            break
                    
                    phase = query.get("hype_metrics", {}).get("phase", "Unknown")
                    display_name = f"{tech_name} | {cat_name} | {phase}"
                    
                    tech_delete_options.append(display_name)
                    tech_delete_data[display_name] = {
                        "query_id": query_id,
                        "tech_name": tech_name,
                        "cat_name": cat_name,
                        "phase": phase,
                        "timestamp": query.get("timestamp", ""),
                        "analysis_id": query.get("analysis_id", query_id)
                    }
                
                selected_delete_display = st.selectbox(
                    f"Tecnolog√≠a a eliminar (mostrando {len(tech_delete_options)} de {len(all_queries)}):",
                    options=tech_delete_options
                )
                
                selected_delete_info = tech_delete_data[selected_delete_display]
                
                # Mostrar informaci√≥n de la tecnolog√≠a seleccionada
                st.warning(f"""
                **Tecnolog√≠a seleccionada:**
                
                üî¨ **Nombre:** {selected_delete_info['tech_name']}
                üìÅ **Categor√≠a:** {selected_delete_info['cat_name']}
                üìç **Fase:** {selected_delete_info['phase']}
                üÜî **ID:** {selected_delete_info['query_id'][:12]}...
                """)
            
            with col2:
                st.write("#### ‚ö†Ô∏è Confirmaci√≥n")
                
                # Todas las confirmaciones en el formulario
                confirm1 = st.checkbox("‚òëÔ∏è Entiendo que esta acci√≥n no se puede deshacer")
                
                confirm2 = st.checkbox(
                    "‚òëÔ∏è Quiero eliminar permanentemente esta tecnolog√≠a"
                )
                
                confirmation_text = ""
                if confirm1 and confirm2:
                    confirmation_text = st.text_input(
                        "Escribe 'ELIMINAR' para confirmar:",
                        placeholder="ELIMINAR"
                    )
                    
                    if confirmation_text and confirmation_text.upper().strip() != "ELIMINAR":
                        st.error("‚ùå Debes escribir exactamente 'ELIMINAR'")
                elif confirm1 and not confirm2:
                    st.warning("‚ö†Ô∏è Marca la segunda confirmaci√≥n")
                elif not confirm1:
                    st.warning("‚ö†Ô∏è Marca la primera confirmaci√≥n")
                
                # Mostrar estado de validaci√≥n
                text_confirmed = confirmation_text.upper().strip() == "ELIMINAR"
                all_confirmed = confirm1 and confirm2 and text_confirmed
                
                if all_confirmed:
                    st.success("‚úÖ Todas las confirmaciones completadas")
                
                # BOT√ìN SIN DISABLED - Validaci√≥n despu√©s del submit
                submitted = st.form_submit_button(
                    "üóëÔ∏è ELIMINAR PERMANENTEMENTE", 
                    type="secondary"
                )
            
            # Procesar cuando se env√≠a el formulario
            if submitted:
                if not confirm1:
                    st.error("‚ùå Debes confirmar que entiendes que la acci√≥n no se puede deshacer")
                elif not confirm2:
                    st.error("‚ùå Debes confirmar que quieres eliminar permanentemente la tecnolog√≠a")
                elif not text_confirmed:
                    st.error("‚ùå Debes escribir exactamente 'ELIMINAR' en el campo de confirmaci√≥n")
                else:
                    with st.spinner("Eliminando tecnolog√≠a..."):
                        # M√âTODO MEJORADO: Primero verificar que existe
                        query_to_delete = selected_delete_info['query_id']
                        
                        # Debug: Mostrar informaci√≥n del item a eliminar
                        debug_info = self.storage.debug_query_ids(query_to_delete)
                        
                        if debug_info.get('matching_items'):
                            # El item existe, proceder con eliminaci√≥n
                            matching_item = debug_info['matching_items'][0]
                            st.info(f"üîç Item encontrado: {matching_item['tech_name']}")
                            
                            success = self.storage.delete_query(query_to_delete)
                            
                            if success:
                                st.success(f"‚úÖ Tecnolog√≠a '{selected_delete_info['tech_name']}' eliminada exitosamente!")
                                
                                # Invalidar cache
                                self._invalidate_cache()
                                self.storage._invalidate_cache()
                                
                                # Limpiar cache de Streamlit
                                if hasattr(st, 'cache_data'):
                                    st.cache_data.clear()
                                
                                time.sleep(1)
                                st.rerun()
                            else:
                                st.error("‚ùå Error eliminando la tecnolog√≠a. Revisa los logs.")
                                
                                # Mostrar informaci√≥n de debug
                                with st.expander("üîç Informaci√≥n de Debug del Error"):
                                    st.write("**Item que se intent√≥ eliminar:**")
                                    st.json(matching_item)
                                    
                                    st.write("**Posibles causas:**")
                                    st.write("- Permisos insuficientes en DynamoDB")
                                    st.write("- Inconsistencia en las claves primary/sort")
                                    st.write("- Item eliminado por otro proceso")
                        else:
                            # El item no existe
                            st.error(f"‚ùå No se encontr√≥ el item con ID: {query_to_delete}")
                            
                            with st.expander("üîç Informaci√≥n de Debug - Item No Encontrado"):
                                st.write(f"**ID buscado:** {query_to_delete}")
                                st.write(f"**Total items en base:** {debug_info.get('total_items', 0)}")
                                
                                if debug_info.get('all_ids_sample'):
                                    st.write("**Muestra de IDs existentes:**")
                                    for sample in debug_info['all_ids_sample']:
                                        st.write(f"- query_id: {sample['query_id']}")
                                        st.write(f"  analysis_id: {sample['analysis_id']}")
                                        st.write(f"  tecnolog√≠a: {sample['tech_name']}")
                                        st.write("---")
                                
                                st.write("**Posibles soluciones:**")
                                st.write("1. Refrescar la p√°gina y volver a cargar")
                                st.write("2. Limpiar cache y recargar datos")
                                st.write("3. El item pudo haber sido eliminado por otro proceso")
                                
                                # Bot√≥n para limpiar cache y recargar
                                if st.button("üîÑ Limpiar Cache y Recargar", key=f"{self._state_key_base}_debug_reload"):
                                    self._invalidate_cache()
                                    self.storage._invalidate_cache()
                                    if hasattr(st, 'cache_data'):
                                        st.cache_data.clear()
                                    st.rerun()
    
    def _show_massive_operations_optimized(self):
        """OPTIMIZADA: Operaciones masivas con mejor rendimiento"""
        st.write("### üìä Operaciones Masivas")
        
        # Obtener estad√≠sticas con cache
        all_queries = self._get_cached_data(
            "all_queries_massive",
            lambda: self.storage.get_all_hype_cycle_queries()
        )
        
        categories = self._get_cached_data(
            "categories_massive",
            lambda: self.storage.storage.get_all_categories()
        )
        
        # Estad√≠sticas en tiempo real
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Tecnolog√≠as", len(all_queries))
        
        with col2:
            st.metric("Total Categor√≠as", len(categories))
        
        with col3:
            # Tecnolog√≠as este mes
            current_month = datetime.now().strftime("%Y-%m")
            recent_queries = [q for q in all_queries if q.get("execution_date", "").startswith(current_month)]
            st.metric("Este Mes", len(recent_queries))
        
        with col4:
            # Fase m√°s com√∫n
            if all_queries:
                phases = [q.get("hype_metrics", {}).get("phase", "Unknown") for q in all_queries]
                most_common_phase = max(set(phases), key=phases.count)
                st.metric("Fase Dominante", most_common_phase[:10] + "...")
        
        st.write("---")
        
        # Operaciones disponibles
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("#### üßπ Operaciones de Limpieza")
            
            if st.button("üîç Buscar Duplicados", type="primary", key=f"{self._state_key_base}_find_dupes_btn"):
                with st.spinner("Buscando duplicados..."):
                    duplicates = self.storage.find_duplicates()
                    
                    if duplicates:
                        st.success(f"‚úÖ Encontrados {len(duplicates)} grupos de duplicados")
                        
                        total_to_delete = sum(len(dup['delete_queries']) for dup in duplicates)
                        st.metric("Consultas duplicadas para eliminar", total_to_delete)
                        
                        # Mostrar muestra
                        with st.expander("Ver muestra de duplicados", expanded=True):
                            for i, dup_group in enumerate(duplicates[:3]):  # Solo 3 para rendimiento
                                st.write(f"**Grupo {i+1}:** {dup_group['search_query'][:50]}...")
                                st.write(f"- Total duplicados: {dup_group['total_count']}")
                                st.write(f"- A eliminar: {len(dup_group['delete_queries'])}")
                                st.write("---")
                        
                        if st.button("üóëÔ∏è Eliminar Todos los Duplicados", type="secondary", key=f"{self._state_key_base}_delete_all_dupes"):
                            all_to_delete = []
                            for dup_group in duplicates:
                                all_to_delete.extend([q.get('query_id') for q in dup_group['delete_queries']])
                            
                            with st.spinner(f"Eliminando {len(all_to_delete)} duplicados..."):
                                results = self.storage.batch_delete_queries(all_to_delete)
                                
                                successful = sum(1 for success in results.values() if success)
                                failed = len(results) - successful
                                
                                if successful > 0:
                                    st.success(f"‚úÖ {successful} duplicados eliminados")
                                    
                                    # Invalidar cache
                                    self._invalidate_cache()
                                    self.storage._invalidate_cache()
                                    if hasattr(st, 'cache_data'):
                                        st.cache_data.clear()
                                
                                if failed > 0:
                                    st.error(f"‚ùå {failed} duplicados no pudieron eliminarse")
                    else:
                        st.info("‚úÖ No se encontraron duplicados")
            
            if st.button("üßπ Limpiar Cache", key=f"{self._state_key_base}_clear_cache_btn"):
                self._invalidate_cache()
                self.storage._invalidate_cache()
                if hasattr(st, 'cache_data'):
                    st.cache_data.clear()
                st.success("‚úÖ Cache limpiado")
        
        with col2:
            st.write("#### üì§ Operaciones de Exportaci√≥n")
            
            if st.button("üì• Exportar Todas las Categor√≠as", type="primary", key=f"{self._state_key_base}_export_all_btn"):
                self._export_all_categories_optimized(all_queries)
            
            if st.button("üìä Exportar Resumen Estad√≠stico", key=f"{self._state_key_base}_export_stats_btn"):
                self._export_summary_statistics_optimized(all_queries, categories)
    
    def _show_data_cleanup(self):
        """NUEVA: Pesta√±a dedicada a limpieza de datos"""
        st.subheader("üßπ Limpieza Avanzada de Datos")
        
        st.write("""
        Herramientas especializadas para mantener la calidad de los datos 
        y eliminar informaci√≥n duplicada o incorrecta.
        """)
        
        # Obtener datos con cache
        all_queries = self._get_cached_data(
            "all_queries_cleanup",
            lambda: self.storage.get_all_hype_cycle_queries()
        )
        
        if not all_queries:
            st.info("No hay datos para limpiar.")
            return
        
        # Pesta√±as de limpieza
        cleanup_tab1, cleanup_tab2, cleanup_tab3 = st.tabs([
            "üîç Detectar Problemas",
            "üóëÔ∏è Eliminar Duplicados",
            "üìä Estad√≠sticas de Calidad"
        ])
        
        with cleanup_tab1:
            self._show_detect_problems(all_queries)
        
        with cleanup_tab2:
            self._show_remove_duplicates_interface(all_queries)
        
        with cleanup_tab3:
            self._show_data_quality_stats(all_queries)
    
    def _show_detect_problems(self, all_queries: List[Dict]):
        """Detecta problemas en los datos"""
        st.write("### üîç Detectar Problemas en los Datos")
        
        if st.button("üîç Analizar Calidad de Datos", type="primary", key=f"{self._state_key_base}_analyze_quality"):
            with st.spinner("Analizando calidad de datos..."):
                # An√°lisis de problemas
                problems = {
                    'missing_tech_names': [],
                    'low_confidence': [],
                    'no_mentions': [],
                    'invalid_dates': [],
                    'duplicate_queries': [],
                    'missing_phase': []
                }
                
                seen_queries = {}
                
                for query in all_queries:
                    query_id = query.get('query_id', 'Unknown')
                    
                    # Nombre de tecnolog√≠a faltante
                    tech_name = query.get('technology_name')
                    if not tech_name or tech_name.strip() == "":
                        problems['missing_tech_names'].append(query_id)
                    
                    # Confianza baja
                    hype_metrics = query.get('hype_metrics', {})
                    confidence = self._safe_float_format(hype_metrics.get('confidence', 0), "", "0")
                    if float(confidence) < 0.3:
                        problems['low_confidence'].append(query_id)
                    
                    # Sin menciones
                    mentions = self._safe_int_format(hype_metrics.get('total_mentions', 0), 0)
                    if mentions == 0:
                        problems['no_mentions'].append(query_id)
                    
                    # Fechas inv√°lidas
                    exec_date = query.get('execution_date', '')
                    try:
                        if exec_date:
                            datetime.fromisoformat(exec_date.replace('Z', '+00:00'))
                    except:
                        problems['invalid_dates'].append(query_id)
                    
                    # Fase faltante
                    phase = hype_metrics.get('phase', '')
                    if not phase or phase == 'Unknown':
                        problems['missing_phase'].append(query_id)
                    
                    # Consultas duplicadas
                    search_query = query.get('search_query', '').strip().lower()
                    if search_query:
                        if search_query in seen_queries:
                            problems['duplicate_queries'].append(query_id)
                        else:
                            seen_queries[search_query] = query_id
                
                # Mostrar resultados
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Nombres faltantes", len(problems['missing_tech_names']))
                    st.metric("Confianza baja (<30%)", len(problems['low_confidence']))
                
                with col2:
                    st.metric("Sin menciones", len(problems['no_mentions']))
                    st.metric("Fechas inv√°lidas", len(problems['invalid_dates']))
                
                with col3:
                    st.metric("Fases faltantes", len(problems['missing_phase']))
                    st.metric("Consultas duplicadas", len(problems['duplicate_queries']))
                
                # Mostrar detalles de problemas
                if any(len(problem_list) > 0 for problem_list in problems.values()):
                    with st.expander("Ver detalles de problemas", expanded=True):
                        for problem_type, problem_list in problems.items():
                            if problem_list:
                                st.write(f"**{problem_type.replace('_', ' ').title()}:** {len(problem_list)} registros")
                                st.write(f"IDs: {', '.join(problem_list[:5])}{'...' if len(problem_list) > 5 else ''}")
                                st.write("---")
                else:
                    st.success("‚úÖ No se detectaron problemas significativos en los datos")
    
    def _show_remove_duplicates_interface(self, all_queries: List[Dict]):
        """Interfaz para eliminar duplicados"""
        st.write("### üóëÔ∏è Eliminar Consultas Duplicadas")
        
        if st.button("üîç Buscar Duplicados", type="primary", key=f"{self._state_key_base}_find_duplicates_cleanup"):
            with st.spinner("Buscando duplicados..."):
                duplicates = self.storage.find_duplicates()
                st.session_state[f"{self._state_key_base}_duplicates_found"] = duplicates
        
        # Mostrar duplicados encontrados
        duplicates = st.session_state.get(f"{self._state_key_base}_duplicates_found", [])
        
        if duplicates:
            st.write(f"### üìä Duplicados Encontrados: {len(duplicates)} grupos")
            
            total_duplicates = sum(len(dup['delete_queries']) for dup in duplicates)
            st.metric("Total de consultas duplicadas para eliminar", total_duplicates)
            
            # Interfaz de selecci√≥n masiva
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("‚úÖ Seleccionar Todos", key=f"{self._state_key_base}_select_all_dupes"):
                    selected_ids = []
                    for dup_group in duplicates:
                        selected_ids.extend([q.get('query_id') for q in dup_group['delete_queries']])
                    st.session_state[f"{self._state_key_base}_selected_duplicates"] = selected_ids
                    st.success(f"Seleccionados {len(selected_ids)} duplicados")
            
            with col2:
                if st.button("‚ùå Deseleccionar Todos", key=f"{self._state_key_base}_deselect_all_dupes"):
                    st.session_state[f"{self._state_key_base}_selected_duplicates"] = []
                    st.info("Duplicados deseleccionados")
            
            # Mostrar grupos de duplicados (limitado para rendimiento)
            for i, duplicate_group in enumerate(duplicates[:10]):  # Solo primeros 10
                with st.expander(f"Grupo {i+1}: {duplicate_group['search_query'][:50]}... ({duplicate_group['total_count']} duplicados)", expanded=False):
                    
                    st.write(f"**Consulta:** {duplicate_group['search_query']}")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**Mantener (m√°s reciente):**")
                        keep_query = duplicate_group['keep_query']
                        st.write(f"- ID: {keep_query.get('query_id', 'N/A')[:12]}...")
                        st.write(f"- Fecha: {keep_query.get('execution_date', 'N/A')[:19]}")
                    
                    with col2:
                        st.write("**Eliminar:**")
                        for del_query in duplicate_group['delete_queries']:
                            query_id = del_query.get('query_id', 'N/A')
                            st.write(f"- {query_id[:12]}... | {del_query.get('execution_date', 'N/A')[:19]}")
            
            if len(duplicates) > 10:
                st.info(f"Mostrando los primeros 10 de {len(duplicates)} grupos para mejor rendimiento")
            
            # Eliminar duplicados seleccionados
            selected_duplicates = st.session_state.get(f"{self._state_key_base}_selected_duplicates", [])
            
            if selected_duplicates or total_duplicates > 0:
                st.write("---")
                st.write("### üóëÔ∏è Eliminar Duplicados")
                
                col1, col2, col3 = st.columns([1, 1, 1])
                
                with col1:
                    auto_select = st.checkbox("Eliminar todos autom√°ticamente", key=f"{self._state_key_base}_auto_select_dupes")
                
                with col2:
                    confirm_deletion = st.checkbox("Confirmar eliminaci√≥n", key=f"{self._state_key_base}_confirm_mass_delete")
                
                with col3:
                    # BOT√ìN SIN DISABLED - Validaci√≥n despu√©s del submit  
                    if st.button(f"üóëÔ∏è ELIMINAR DUPLICADOS", type="secondary", key=f"{self._state_key_base}_execute_delete_dupes"):
                        # Validar confirmaciones despu√©s del click
                        if not confirm_deletion:
                            st.error("‚ùå Debes confirmar la eliminaci√≥n marcando la casilla")
                        else:
                            if auto_select:
                                # Eliminar todos los duplicados
                                all_to_delete = []
                                for dup_group in duplicates:
                                    all_to_delete.extend([q.get('query_id') for q in dup_group['delete_queries']])
                            else:
                                all_to_delete = selected_duplicates
                            
                            if all_to_delete:
                                with st.spinner(f"Eliminando {len(all_to_delete)} duplicados..."):
                                    results = self.storage.batch_delete_queries(all_to_delete)
                                    
                                    successful = sum(1 for success in results.values() if success)
                                    failed = len(results) - successful
                                    
                                    if successful > 0:
                                        st.success(f"‚úÖ {successful} duplicados eliminados")
                                        
                                        # Invalidar cache
                                        self._invalidate_cache()
                                        self.storage._invalidate_cache()
                                        if hasattr(st, 'cache_data'):
                                            st.cache_data.clear()
                                    
                                    if failed > 0:
                                        st.error(f"‚ùå {failed} duplicados no pudieron eliminarse")
                            else:
                                st.warning("No hay duplicados seleccionados para eliminar")
        else:
            st.info("Haz clic en 'Buscar Duplicados' para encontrar consultas duplicadas.")
    
    def _show_data_quality_stats(self, all_queries: List[Dict]):
        """Muestra estad√≠sticas de calidad de datos"""
        st.write("### üìä Estad√≠sticas de Calidad de Datos")
        
        if not all_queries:
            st.info("No hay datos para analizar")
            return
        
        # Calcular estad√≠sticas
        total_queries = len(all_queries)
        
        # M√©tricas de calidad
        with_tech_names = sum(1 for q in all_queries if q.get('technology_name', '').strip())
        with_high_confidence = sum(1 for q in all_queries 
                                 if float(self._safe_float_format(q.get('hype_metrics', {}).get('confidence', 0), "", "0")) >= 0.7)
        with_mentions = sum(1 for q in all_queries 
                          if self._safe_int_format(q.get('hype_metrics', {}).get('total_mentions', 0), 0) > 0)
        with_valid_dates = 0
        for q in all_queries:
            try:
                exec_date = q.get('execution_date', '')
                if exec_date:
                    datetime.fromisoformat(exec_date.replace('Z', '+00:00'))
                    with_valid_dates += 1
            except:
                pass
        
        # Mostrar m√©tricas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            percentage = (with_tech_names / total_queries) * 100 if total_queries > 0 else 0
            st.metric("Con Nombres de Tecnolog√≠a", f"{with_tech_names}/{total_queries}", f"{percentage:.1f}%")
        
        with col2:
            percentage = (with_high_confidence / total_queries) * 100 if total_queries > 0 else 0
            st.metric("Alta Confianza (‚â•70%)", f"{with_high_confidence}/{total_queries}", f"{percentage:.1f}%")
        
        with col3:
            percentage = (with_mentions / total_queries) * 100 if total_queries > 0 else 0
            st.metric("Con Menciones", f"{with_mentions}/{total_queries}", f"{percentage:.1f}%")
        
        with col4:
            percentage = (with_valid_dates / total_queries) * 100 if total_queries > 0 else 0
            st.metric("Fechas V√°lidas", f"{with_valid_dates}/{total_queries}", f"{percentage:.1f}%")
        
        # Gr√°fico de distribuci√≥n de calidad
        st.write("### üìà Distribuci√≥n de Calidad")
        
        quality_data = {
            'M√©trica': ['Nombres de Tecnolog√≠a', 'Alta Confianza', 'Con Menciones', 'Fechas V√°lidas'],
            'Porcentaje': [
                (with_tech_names / total_queries) * 100,
                (with_high_confidence / total_queries) * 100,
                (with_mentions / total_queries) * 100,
                (with_valid_dates / total_queries) * 100
            ]
        }
        
        fig = px.bar(
            x=quality_data['M√©trica'],
            y=quality_data['Porcentaje'],
            title="Porcentaje de Consultas con Datos de Calidad",
            color=quality_data['Porcentaje'],
            color_continuous_scale="Viridis"
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        # Distribuci√≥n por fases
        st.write("### üîÑ Distribuci√≥n por Fases del Hype Cycle")
        
        phase_counts = {}
        for query in all_queries:
            phase = query.get("hype_metrics", {}).get("phase", "Unknown")
            phase_counts[phase] = phase_counts.get(phase, 0) + 1
        
        if phase_counts:
            fig_phases = px.pie(
                values=list(phase_counts.values()),
                names=list(phase_counts.keys()),
                title="Distribuci√≥n de Tecnolog√≠as por Fase"
            )
            st.plotly_chart(fig_phases, use_container_width=True)
    
    # ===== M√âTODOS AUXILIARES OPTIMIZADOS =====
    
    def _export_category_data(self, category_name: str, tech_data: List[Dict]):
        """OPTIMIZADA: Exporta datos de una categor√≠a espec√≠fica"""
        try:
            df = pd.DataFrame(tech_data)
            csv = df.to_csv(index=False)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M')
            filename = f"hype_cycle_{category_name}_{timestamp}.csv"
            
            st.download_button(
                label=f"üì• Descargar {filename}",
                data=csv,
                file_name=filename,
                mime="text/csv",
                key=f"{self._state_key_base}_download_{category_name}_{timestamp}"
            )
            
            st.success(f"‚úÖ Archivo CSV preparado para descarga")
            
        except Exception as e:
            st.error(f"Error exportando datos: {str(e)}")
    
    def _export_all_categories_optimized(self, all_queries: List[Dict]):
        """OPTIMIZADA: Exporta datos de todas las categor√≠as"""
        try:
            if not all_queries:
                st.warning("No hay datos para exportar.")
                return
            
            export_data = []
            for query in all_queries:
                hype_metrics = query.get("hype_metrics", {})
                
                # Formatear fecha
                exec_date = query.get("execution_date", "")
                try:
                    if exec_date:
                        formatted_date = datetime.fromisoformat(exec_date.replace('Z', '+00:00')).strftime("%Y-%m-%d %H:%M")
                    else:
                        formatted_date = "No disponible"
                except:
                    formatted_date = exec_date[:16] if len(exec_date) >= 16 else "No disponible"
                
                export_data.append({
                    "ID": query.get("query_id", query.get("analysis_id", "")),
                    "Tecnologia": query.get("technology_name") or query.get("search_query", "")[:50],
                    "Categoria": query.get("category_name", "Sin categor√≠a"),
                    "Fase": hype_metrics.get("phase", "Unknown"),
                    "Confianza": self._safe_float_format(hype_metrics.get("confidence", 0), ".3f"),
                    "Menciones_Total": self._safe_int_format(hype_metrics.get("total_mentions", 0)),
                    "Tiempo_al_Plateau": hype_metrics.get("time_to_plateau", "N/A"),
                    "Sentimiento_Promedio": self._safe_float_format(hype_metrics.get("sentiment_avg", 0), ".3f"),
                    "Posicion_X": self._safe_float_format(hype_metrics.get("hype_cycle_position_x", 0), ".2f"),
                    "Posicion_Y": self._safe_float_format(hype_metrics.get("hype_cycle_position_y", 0), ".2f"),
                    "Fecha_Analisis": formatted_date,
                    "Consulta_Original": query.get("search_query", "")
                })
            
            # Crear DataFrame y CSV
            df_export = pd.DataFrame(export_data)
            csv = df_export.to_csv(index=False)
            
            # Bot√≥n de descarga
            timestamp = datetime.now().strftime('%Y%m%d_%H%M')
            filename = f"hype_cycle_completo_{timestamp}.csv"
            
            st.download_button(
                label=f"üì• Descargar {filename}",
                data=csv,
                file_name=filename,
                mime="text/csv",
                key=f"{self._state_key_base}_download_all_{timestamp}"
            )
            
            st.success(f"‚úÖ Preparado archivo con {len(export_data)} registros para descarga")
            
        except Exception as e:
            st.error(f"Error exportando datos: {str(e)}")
    
    def _export_summary_statistics_optimized(self, all_queries: List[Dict], categories: List[Dict]):
        """OPTIMIZADA: Exporta estad√≠sticas resumidas"""
        try:
            summary_data = []
            
            for category in categories:
                cat_id = category.get("category_id")
                cat_name = category.get("name", "Sin nombre")
                
                # Filtrar consultas de esta categor√≠a en memoria
                cat_queries = [q for q in all_queries if q.get("category_id") == cat_id]
                
                if not cat_queries:
                    continue
                
                # Calcular estad√≠sticas
                phases = [q.get("hype_metrics", {}).get("phase", "Unknown") for q in cat_queries]
                phase_counts = {phase: phases.count(phase) for phase in set(phases)}
                most_common_phase = max(phase_counts.items(), key=lambda x: x[1])[0] if phase_counts else "N/A"
                
                # Confianza promedio
                confidences = []
                for q in cat_queries:
                    conf_raw = q.get("hype_metrics", {}).get("confidence", 0)
                    conf_float = float(self._safe_float_format(conf_raw, "", "0"))
                    confidences.append(conf_float)
                
                avg_confidence = sum(confidences) / len(confidences) if confidences else 0
                
                # Total menciones
                total_mentions = 0
                for q in cat_queries:
                    mentions_raw = q.get("hype_metrics", {}).get("total_mentions", 0)
                    mentions_int = self._safe_int_format(mentions_raw, 0)
                    total_mentions += mentions_int
                
                summary_data.append({
                    "Categoria": cat_name,
                    "Total_Tecnologias": len(cat_queries),
                    "Fase_Dominante": most_common_phase,
                    "Confianza_Promedio": round(avg_confidence, 3),
                    "Total_Menciones": total_mentions,
                    "Distribuciones_Fases": json.dumps(phase_counts)
                })
            
            # Crear DataFrame y CSV
            df_summary = pd.DataFrame(summary_data)
            csv_summary = df_summary.to_csv(index=False)
            
            # Bot√≥n de descarga
            timestamp = datetime.now().strftime('%Y%m%d_%H%M')
            filename = f"hype_cycle_resumen_{timestamp}.csv"
            
            st.download_button(
                label=f"üìä Descargar {filename}",
                data=csv_summary,
                file_name=filename,
                mime="text/csv",
                key=f"{self._state_key_base}_download_summary_{timestamp}"
            )
            
            st.success(f"‚úÖ Resumen estad√≠stico preparado con {len(summary_data)} categor√≠as")
            
        except Exception as e:
            st.error(f"Error exportando resumen: {str(e)}")
    
    def _recalculate_all_positions(self):
        """OPTIMIZADA: Recalcula las posiciones de todas las tecnolog√≠as"""
        try:
            updated_count = 0
            all_queries = self._get_cached_data(
                "all_queries_recalc",
                lambda: self.storage.get_all_hype_cycle_queries()
            )
            
            # Procesar en lotes para mejor rendimiento
            batch_size = 10
            total_batches = math.ceil(len(all_queries) / batch_size)
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for batch_idx in range(total_batches):
                start_idx = batch_idx * batch_size
                end_idx = min(start_idx + batch_size, len(all_queries))
                batch_queries = all_queries[start_idx:end_idx]
                
                status_text.text(f"Procesando lote {batch_idx + 1} de {total_batches}")
                
                for query in batch_queries:
                    hype_metrics = query.get("hype_metrics", {})
                    phase = hype_metrics.get("phase", "Unknown")
                    
                    # Formateo seguro de confidence
                    confidence_raw = hype_metrics.get("confidence", 0.5)
                    confidence = float(self._safe_float_format(confidence_raw, "", "0.5"))
                    
                    # Formateo seguro de total_mentions
                    total_mentions_raw = hype_metrics.get("total_mentions", 0)
                    total_mentions = self._safe_int_format(total_mentions_raw, 0)
                    
                    # Recalcular posici√≥n
                    pos_x, pos_y = self.positioner.calculate_position(phase, confidence, total_mentions)
                    
                    # Actualizar m√©tricas (conceptualmente)
                    hype_metrics["hype_cycle_position_x"] = pos_x
                    hype_metrics["hype_cycle_position_y"] = pos_y
                    
                    updated_count += 1
                
                # Actualizar barra de progreso
                progress = (batch_idx + 1) / total_batches
                progress_bar.progress(progress)
            
            progress_bar.empty()
            status_text.empty()
            
            st.success(f"‚úÖ Recalculadas {updated_count} posiciones de tecnolog√≠as")
            
        except Exception as e:
            st.error(f"Error recalculando posiciones: {str(e)}")
    
    def _detect_duplicates_optimized(self):
        """OPTIMIZADA: Detecta posibles consultas duplicadas"""
        try:
            all_queries = self._get_cached_data(
                "all_queries_duplicates",
                lambda: self.storage.get_all_hype_cycle_queries()
            )
            
            seen_queries = {}
            duplicates = []
            
            # Procesar con progress bar para grandes vol√∫menes
            progress_bar = st.progress(0)
            
            for i, query in enumerate(all_queries):
                search_query = query.get("search_query", "").lower().strip()
                if search_query:
                    if search_query in seen_queries:
                        duplicates.append({
                            "original": seen_queries[search_query],
                            "duplicate": query
                        })
                    else:
                        seen_queries[search_query] = query
                
                # Actualizar progreso cada 10 elementos
                if i % 10 == 0:
                    progress = (i + 1) / len(all_queries)
                    progress_bar.progress(progress)
            
            progress_bar.empty()
            
            if duplicates:
                st.warning(f"‚ö†Ô∏è Encontrados {len(duplicates)} posibles duplicados")
                
                with st.expander("Ver duplicados encontrados", expanded=True):
                    # Mostrar solo los primeros 10 para rendimiento
                    display_duplicates = duplicates[:10]
                    
                    for i, dup in enumerate(display_duplicates):
                        st.write(f"**Duplicado {i+1}:**")
                        st.write(f"- Query: `{dup['duplicate'].get('search_query', '')[:60]}...`")
                        st.write(f"- Original ID: `{dup['original'].get('query_id', 'N/A')[:12]}...`")
                        st.write(f"- Duplicado ID: `{dup['duplicate'].get('query_id', 'N/A')[:12]}...`")
                        st.write("---")
                    
                    if len(duplicates) > 10:
                        st.write(f"... y {len(duplicates) - 10} duplicados m√°s.")
                        st.info("üí° Usa la pesta√±a 'Limpieza de Datos' para gestionar todos los duplicados")
            else:
                st.success("‚úÖ No se encontraron duplicados obvios")
                
        except Exception as e:
            st.error(f"Error detectando duplicados: {str(e)}")
    
    def get_cache_info(self) -> Dict:
        """Obtiene informaci√≥n del estado del cache"""
        return {
            'local_cache_keys': list(self._local_cache.keys()),
            'local_cache_size': len(self._local_cache),
            'cache_timestamps': {k: time.time() - v for k, v in self._cache_timestamp.items()},
            'cache_ttl': self._cache_ttl
        }
    
    def clear_all_caches(self):
        """Limpia todos los caches (local y Streamlit)"""
        # Cache local
        self._invalidate_cache()
        
        # Cache del storage
        if hasattr(self.storage, '_invalidate_cache'):
            self.storage._invalidate_cache()
        
        # Cache de Streamlit
        if hasattr(st, 'cache_data'):
            st.cache_data.clear()
        
        return True
    
    def get_performance_stats(self) -> Dict:
        """Obtiene estad√≠sticas de rendimiento"""
        all_queries = self._get_cached_data(
            "all_queries_stats",
            lambda: self.storage.get_all_hype_cycle_queries()
        )
        
        categories = self._get_cached_data(
            "categories_stats",
            lambda: self.storage.storage.get_all_categories()
        )
        
        return {
            'total_queries': len(all_queries),
            'total_categories': len(categories),
            'cache_hits': len([k for k in self._local_cache.keys() if k.startswith('all_queries')]),
            'last_update': max(self._cache_timestamp.values()) if self._cache_timestamp else 0,
            'avg_queries_per_category': len(all_queries) / len(categories) if categories else 0
        }
    
    def _show_category_management(self):
        """NUEVA: Gesti√≥n completa de categor√≠as - crear, editar, eliminar"""
        st.subheader("üè∑Ô∏è Gesti√≥n Completa de Categor√≠as")
        
        st.write("""
        Administra todas las categor√≠as: crear nuevas, editar existentes y eliminar categor√≠as completas.
        **¬°CUIDADO!** Eliminar una categor√≠a afectar√° todas las tecnolog√≠as asociadas.
        """)
        
        # Obtener categor√≠as existentes
        try:
            categories = self.storage.storage.get_all_categories()
        except Exception as e:
            st.error(f"Error cargando categor√≠as: {str(e)}")
            return
        
        # Pesta√±as para organizar funcionalidades
        sub_tab1, sub_tab2, sub_tab3 = st.tabs([
            "‚ûï Crear Nueva", 
            "‚úèÔ∏è Editar Existente", 
            "üóëÔ∏è Eliminar Categor√≠a"
        ])
        
        with sub_tab1:
            self._show_create_category_form()
        
        with sub_tab2:
            self._show_edit_category_form(categories)
        
        with sub_tab3:
            self._show_delete_category_form(categories)

    def _show_create_category_form(self):
        """Formulario para crear nuevas categor√≠as"""
        st.write("### ‚ûï Crear Nueva Categor√≠a")
        
        with st.form(key=f"{self._state_key_base}_create_category_form", clear_on_submit=True):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                category_name = st.text_input(
                    "Nombre de la categor√≠a *",
                    placeholder="ej: Inteligencia Artificial, Blockchain, IoT...",
                    help="Nombre √∫nico para identificar la categor√≠a"
                )
                
                category_description = st.text_area(
                    "Descripci√≥n (opcional)",
                    placeholder="Descripci√≥n detallada de qu√© tecnolog√≠as incluye esta categor√≠a...",
                    height=100,
                    help="Descripci√≥n que ayude a identificar qu√© tecnolog√≠as pertenecen a esta categor√≠a"
                )
            
            with col2:
                st.write("**Validaciones:**")
                
                # Validaciones en tiempo real
                if category_name:
                    if len(category_name.strip()) < 2:
                        st.error("M√≠nimo 2 caracteres")
                    elif len(category_name.strip()) > 50:
                        st.error("M√°ximo 50 caracteres")
                    else:
                        # Verificar duplicados
                        try:
                            existing_categories = self.storage.storage.get_all_categories()
                            existing_names = [cat.get('name', '').lower() for cat in existing_categories]
                            
                            if category_name.strip().lower() in existing_names:
                                st.error("‚ùå Nombre ya existe")
                            else:
                                st.success("‚úÖ Nombre v√°lido")
                        except:
                            st.warning("‚ö†Ô∏è Error verificando duplicados")
                else:
                    st.info("Ingresa un nombre")
            
            st.write("---")
            
            # Bot√≥n de creaci√≥n
            col1, col2, col3 = st.columns([1, 1, 1])
            
            with col2:
                submitted = st.form_submit_button(
                    "‚ú® CREAR CATEGOR√çA",
                    type="primary",
                    use_container_width=True
                )
            
            # Procesar creaci√≥n
            if submitted:
                if not category_name or not category_name.strip():
                    st.error("‚ùå El nombre de la categor√≠a es obligatorio")
                else:
                    with st.spinner("Creando categor√≠a..."):
                        from hype_cycle_storage import HypeCycleStorage
                        
                        # Usar el m√©todo de validaci√≥n
                        if hasattr(self.storage, 'create_category_with_validation'):
                            result = self.storage.create_category_with_validation(
                                category_name.strip(), 
                                category_description.strip()
                            )
                        else:
                            # Fallback a m√©todo b√°sico
                            try:
                                category_id = self.storage.storage.add_category(
                                    category_name.strip(), 
                                    category_description.strip()
                                )
                                if category_id:
                                    result = {
                                        'success': True,
                                        'message': f"Categor√≠a '{category_name}' creada exitosamente",
                                        'category_id': category_id
                                    }
                                else:
                                    result = {
                                        'success': False,
                                        'message': "Error creando la categor√≠a",
                                        'category_id': None
                                    }
                            except Exception as e:
                                result = {
                                    'success': False,
                                    'message': f"Error: {str(e)}",
                                    'category_id': None
                                }
                        
                        if result['success']:
                            st.success(f"‚úÖ {result['message']}")
                            st.balloons()
                            
                            # Limpiar cache
                            self._invalidate_cache()
                            if hasattr(st, 'cache_data'):
                                st.cache_data.clear()
                            
                            time.sleep(2)
                            st.rerun()
                        else:
                            st.error(f"‚ùå {result['message']}")

    def _show_edit_category_form(self, categories):
        """Formulario para editar categor√≠as existentes"""
        st.write("### ‚úèÔ∏è Editar Categor√≠a Existente")
        
        if not categories:
            st.info("No hay categor√≠as para editar.")
            return
        
        # Filtrar categor√≠as editables (excluir default)
        editable_categories = [cat for cat in categories if cat.get('category_id') != 'default']
        
        if not editable_categories:
            st.info("Solo existe la categor√≠a por defecto, que no se puede editar.")
            return
        
        with st.form(key=f"{self._state_key_base}_edit_category_form", clear_on_submit=False):
            # Selector de categor√≠a
            category_options = {}
            for cat in editable_categories:
                cat_name = cat.get('name', 'Sin nombre')
                cat_id = cat.get('category_id')
                
                # Mostrar uso de la categor√≠a
                try:
                    usage_count = self.storage.storage.check_category_usage(cat_id)
                    display_name = f"{cat_name} ({usage_count} tecnolog√≠as)"
                except:
                    display_name = cat_name
                
                category_options[display_name] = cat
            
            selected_display_name = st.selectbox(
                "Selecciona categor√≠a a editar:",
                options=list(category_options.keys()),
                help="Muestra el n√∫mero de tecnolog√≠as en cada categor√≠a"
            )
            
            selected_category = category_options[selected_display_name]
            
            # Mostrar informaci√≥n actual
            st.info(f"""
            **Categor√≠a actual:**
            - **Nombre:** {selected_category.get('name', 'Sin nombre')}
            - **Descripci√≥n:** {selected_category.get('description', 'Sin descripci√≥n')}
            - **ID:** {selected_category.get('category_id', 'N/A')}
            """)
            
            # Campos de edici√≥n
            col1, col2 = st.columns(2)
            
            with col1:
                new_name = st.text_input(
                    "Nuevo nombre:",
                    value=selected_category.get('name', ''),
                    help="Deja vac√≠o para no cambiar"
                )
            
            with col2:
                new_description = st.text_area(
                    "Nueva descripci√≥n:",
                    value=selected_category.get('description', ''),
                    height=100,
                    help="Deja vac√≠o para no cambiar"
                )
            
            # Bot√≥n de actualizaci√≥n
            col1, col2, col3 = st.columns([1, 1, 1])
            
            with col2:
                submitted = st.form_submit_button(
                    "üíæ ACTUALIZAR CATEGOR√çA",
                    type="primary",
                    use_container_width=True
                )
            
            # Procesar actualizaci√≥n
            if submitted:
                category_id = selected_category.get('category_id')
                
                # Verificar si hay cambios
                current_name = selected_category.get('name', '')
                current_desc = selected_category.get('description', '')
                
                if new_name.strip() == current_name and new_description.strip() == current_desc:
                    st.warning("‚ö†Ô∏è No se detectaron cambios para actualizar")
                else:
                    with st.spinner("Actualizando categor√≠a..."):
                        try:
                            success, message = self.storage.storage.update_category(
                                category_id, 
                                new_name.strip() if new_name.strip() != current_name else None,
                                new_description.strip() if new_description.strip() != current_desc else None
                            )
                            
                            if success:
                                st.success(f"‚úÖ {message}")
                                
                                # Limpiar cache
                                self._invalidate_cache()
                                if hasattr(st, 'cache_data'):
                                    st.cache_data.clear()
                                
                                time.sleep(2)
                                st.rerun()
                            else:
                                st.error(f"‚ùå {message}")
                                
                        except Exception as e:
                            st.error(f"‚ùå Error actualizando categor√≠a: {str(e)}")

    def _show_delete_category_form(self, categories):
        """Formulario para eliminar categor√≠as completas"""
        st.write("### üóëÔ∏è Eliminar Categor√≠a Completa")
        
        st.error("""
        ‚ö†Ô∏è **ADVERTENCIA IMPORTANTE**
        
        Eliminar una categor√≠a es una acci√≥n **IRREVERSIBLE** que afectar√°:
        - La categor√≠a ser√° eliminada permanentemente
        - Todas las tecnolog√≠as asociadas ser√°n afectadas
        
        **Opciones disponibles:**
        - **Mover tecnolog√≠as:** Las tecnolog√≠as se mover√°n a "Sin categor√≠a"
        - **Eliminar todo:** Las tecnolog√≠as tambi√©n ser√°n eliminadas
        """)
        
        # Filtrar categor√≠as eliminables (excluir default)
        deletable_categories = [cat for cat in categories if cat.get('category_id') != 'default']
        
        if not deletable_categories:
            st.info("Solo existe la categor√≠a por defecto, que no se puede eliminar.")
            return
        
        with st.form(key=f"{self._state_key_base}_delete_category_form", clear_on_submit=False):
            # Selector de categor√≠a
            category_options = {}
            for cat in deletable_categories:
                cat_name = cat.get('name', 'Sin nombre')
                cat_id = cat.get('category_id')
                
                # Mostrar uso de la categor√≠a
                try:
                    usage_count = self.storage.storage.check_category_usage(cat_id)
                    display_name = f"{cat_name} ({usage_count} tecnolog√≠as)"
                    category_options[display_name] = {
                        'category': cat,
                        'usage_count': usage_count
                    }
                except:
                    display_name = cat_name
                    category_options[display_name] = {
                        'category': cat,
                        'usage_count': 0
                    }
            
            selected_display_name = st.selectbox(
                "Categor√≠a a eliminar:",
                options=list(category_options.keys()),
                help="El n√∫mero entre par√©ntesis indica cu√°ntas tecnolog√≠as se ver√°n afectadas"
            )
            
            selected_info = category_options[selected_display_name]
            selected_category = selected_info['category']
            usage_count = selected_info['usage_count']
            
            # Mostrar impacto de la eliminaci√≥n
            if usage_count > 0:
                st.warning(f"""
                **Impacto de la eliminaci√≥n:**
                
                üìÅ **Categor√≠a:** {selected_category.get('name', 'Sin nombre')}
                üî¨ **Tecnolog√≠as afectadas:** {usage_count}
                """)
            else:
                st.info(f"""
                **Categor√≠a a eliminar:**
                
                üìÅ **Nombre:** {selected_category.get('name', 'Sin nombre')}
                ‚úÖ **Sin tecnolog√≠as asociadas** - Eliminaci√≥n segura
                """)
            
            # Opciones de eliminaci√≥n
            if usage_count > 0:
                st.write("### üéØ Opciones para las tecnolog√≠as")
                
                action_option = st.radio(
                    "¬øQu√© hacer con las tecnolog√≠as de esta categor√≠a?",
                    options=[
                        "Mover a 'Sin categor√≠a'",
                        "Eliminar todas las tecnolog√≠as"
                    ],
                    index=0,
                    help="Elige qu√© suceder√° con las tecnolog√≠as cuando se elimine la categor√≠a"
                )
                
                move_to_default = action_option == "Mover a 'Sin categor√≠a'"
                
                if not move_to_default:
                    st.error(f"‚ö†Ô∏è Se eliminar√°n {usage_count} tecnolog√≠as PERMANENTEMENTE")
            else:
                move_to_default = True
            
            # Confirmaciones de seguridad
            st.write("### üîí Confirmaciones de Seguridad")
            
            col1, col2 = st.columns(2)
            
            with col1:
                confirm1 = st.checkbox(
                    f"‚òëÔ∏è Entiendo que se eliminar√° la categor√≠a '{selected_category.get('name', '')}'"
                )
                
                if usage_count > 0:
                    if move_to_default:
                        confirm2 = st.checkbox(
                            f"‚òëÔ∏è Entiendo que {usage_count} tecnolog√≠as se mover√°n a 'Sin categor√≠a'"
                        )
                    else:
                        confirm2 = st.checkbox(
                            f"‚òëÔ∏è Entiendo que {usage_count} tecnolog√≠as ser√°n ELIMINADAS"
                        )
                else:
                    confirm2 = True
            
            with col2:
                if confirm1 and confirm2:
                    safety_text = st.text_input(
                        "Escribe 'ELIMINAR CATEGOR√çA' para confirmar:",
                        placeholder="ELIMINAR CATEGOR√çA"
                    )
                    
                    text_confirmed = safety_text.upper().strip() == "ELIMINAR CATEGOR√çA"
                    
                    if not text_confirmed and safety_text:
                        st.error("‚ùå Debes escribir exactamente 'ELIMINAR CATEGOR√çA'")
                else:
                    text_confirmed = False
                    st.info("Complete las confirmaciones arriba")
            
            # Bot√≥n de eliminaci√≥n
            st.write("---")
            
            all_confirmed = confirm1 and confirm2 and text_confirmed
            
            col1, col2, col3 = st.columns([1, 1, 1])
            
            with col2:
                submitted = st.form_submit_button(
                    "üóëÔ∏è ELIMINAR CATEGOR√çA",
                    type="secondary",
                    use_container_width=True
                )
            
            # Procesar eliminaci√≥n
            if submitted:
                if not all_confirmed:
                    st.error("‚ùå Debes completar todas las confirmaciones de seguridad")
                else:
                    category_id = selected_category.get('category_id')
                    category_name = selected_category.get('name', 'Sin nombre')
                    
                    with st.spinner(f"Eliminando categor√≠a '{category_name}'..."):
                        try:
                            if hasattr(self.storage, 'delete_category_complete'):
                                result = self.storage.delete_category_complete(
                                    category_id, 
                                    move_to_default
                                )
                            else:
                                # Fallback manual
                                # Primero obtener tecnolog√≠as
                                technologies = self.storage.get_queries_by_category(category_id)
                                
                                # Procesar tecnolog√≠as
                                for tech in technologies:
                                    tech_id = tech.get('query_id', tech.get('analysis_id'))
                                    if move_to_default:
                                        self.storage.move_technology_to_category(tech_id, "default")
                                    else:
                                        self.storage.delete_query(tech_id)
                                
                                # Eliminar categor√≠a
                                success, message = self.storage.storage.delete_category(category_id)
                                
                                result = {
                                    'success': success,
                                    'message': message,
                                    'technologies_affected': len(technologies)
                                }
                            
                            if result['success']:
                                st.success(f"‚úÖ {result['message']}")
                                
                                if result['technologies_affected'] > 0:
                                    if move_to_default:
                                        st.info(f"üìÅ {result['technologies_affected']} tecnolog√≠as movidas a 'Sin categor√≠a'")
                                    else:
                                        st.info(f"üóëÔ∏è {result['technologies_affected']} tecnolog√≠as eliminadas")
                                
                                # Limpiar cache
                                self._invalidate_cache()
                                if hasattr(st, 'cache_data'):
                                    st.cache_data.clear()
                                
                                st.balloons()
                                time.sleep(3)
                                st.rerun()
                            else:
                                st.error(f"‚ùå {result['message']}")
                                
                        except Exception as e:
                            st.error(f"‚ùå Error eliminando categor√≠a: {str(e)}")
        
    def show_admin_interface(self):
        """Muestra la interfaz principal de administraci√≥n AMPLIADA CON IA"""
        st.header("üè∑Ô∏è Administraci√≥n de Categor√≠as - Hype Cycle")
        
        st.write("""
        Gestiona las tecnolog√≠as analizadas por categor√≠a y visualiza su posici√≥n 
        en el Hype Cycle de Gartner. **Versi√≥n optimizada con an√°lisis IA.**
        """)
        
        # Pesta√±as principales - AMPLIADAS CON IA
        tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
            "üìä Vista por Categor√≠as",
            "üéØ Gr√°fica Hype Cycle", 
            "üè∑Ô∏è Gesti√≥n de Categor√≠as",
            "‚öôÔ∏è Gesti√≥n Avanzada",
            "üßπ Limpieza de Datos",
            "ü§ñ An√°lisis IA"  # NUEVA PESTA√ëA
        ])
        
        with tab1:
            self._show_category_overview_optimized()
        
        with tab2:
            self._show_hype_cycle_chart_optimized()
        
        with tab3:
            self._show_category_management()
        
        with tab4:
            self._show_advanced_management_optimized()
        
        with tab5:
            self._show_data_cleanup()
        
        with tab6:
            self._show_ai_analysis_interface()  # NUEVA FUNCI√ìN

    def _show_ai_analysis_interface(self):
        """NUEVA: Interfaz completa para an√°lisis con IA"""
        st.subheader("ü§ñ An√°lisis Inteligente del Hype Cycle")
        
        st.write("""
        Genera insights autom√°ticos sobre el estado del Hype Cycle usando inteligencia artificial.
        Analiza patrones, tendencias y genera recomendaciones estrat√©gicas basadas en tus datos.
        """)
        
        # Verificar dependencias y configuraci√≥n
        try:
            from hype_ai_analyzer import (
                HypeAIAnalyzer, validate_openai_key, estimate_analysis_cost, 
                check_env_setup, get_openai_key_from_env
            )
            ai_available = True
        except ImportError:
            st.error("‚ùå M√≥dulo de IA no disponible. Instala: `pip install openai python-dotenv`")
            return
        
        # Verificar setup del entorno
        env_status = check_env_setup()
        
        # Mostrar estado del entorno
        self._show_environment_status(env_status)
        
        # Si no est√° listo autom√°ticamente, permitir configuraci√≥n manual
        api_key = None
        if env_status["ready"]:
            api_key = get_openai_key_from_env()
            st.success("‚úÖ Configuraci√≥n autom√°tica desde .env")
        else:
            api_key = self._show_manual_api_configuration(env_status)
        
        if not api_key:
            st.stop()  # No continuar sin API key v√°lida
        
        # === CONFIGURACI√ìN PRINCIPAL ===
        st.write("### ‚öôÔ∏è Configuraci√≥n del An√°lisis")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Selector de categor√≠a
            categories = self._get_cached_data(
                "categories_ai", 
                lambda: self.storage.storage.get_all_categories()
            )
            
            if not categories:
                st.error("No hay categor√≠as disponibles para analizar")
                return
            
            category_options = {}
            category_stats = {}
            
            # Preparar opciones con estad√≠sticas
            for cat in categories:
                cat_id = cat.get("category_id")
                cat_name = cat.get("name", "Sin nombre")
                
                # Obtener consultas de la categor√≠a
                try:
                    queries = self.storage.get_queries_by_category(cat_id)
                    if queries:
                        category_options[f"{cat_name} ({len(queries)} tecnolog√≠as)"] = cat_id
                        category_stats[cat_id] = {
                            "name": cat_name,
                            "queries": queries,
                            "count": len(queries)
                        }
                except Exception as e:
                    continue
            
            if not category_options:
                st.warning("No hay categor√≠as con tecnolog√≠as para analizar")
                return
            
            selected_category_display = st.selectbox(
                "üìÅ Selecciona categor√≠a para analizar:",
                options=list(category_options.keys()),
                key=f"{self._state_key_base}_ai_category_selector",
                help="Selecciona la categor√≠a que quieres que analice la IA"
            )
            
            selected_category_id = category_options[selected_category_display]
            selected_category_info = category_stats[selected_category_id]
            queries = selected_category_info["queries"]
            
            # Mostrar preview de datos
            self._show_category_preview_for_ai(queries, selected_category_info["name"])
        
        with col2:
            st.write("#### üéõÔ∏è Configuraci√≥n IA")
            
            # Mostrar fuente de API key
            if env_status["ready"]:
                st.success("üîë API Key: desde .env")
            else:
                st.info("üîë API Key: manual")
            
            # Configuraciones de an√°lisis
            analysis_depth = st.selectbox(
                "üìä Profundidad del an√°lisis:",
                options=["Ejecutivo", "Detallado", "T√©cnico"],
                index=1,  # "Detallado" por defecto
                key=f"{self._state_key_base}_analysis_depth",
                help="Ejecutivo: Resumen para C-level | Detallado: An√°lisis completo | T√©cnico: An√°lisis profundo"
            )
            
            # Modelo de IA
            ai_model = st.selectbox(
                "üß† Modelo IA:",
                options=["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"],
                index=0,  # GPT-4 por defecto
                key=f"{self._state_key_base}_ai_model",
                help="GPT-4: Mejor calidad | GPT-4-turbo: M√°s r√°pido | GPT-3.5: M√°s econ√≥mico"
            )
            
            # Mostrar estimaci√≥n de costo
            if queries:
                cost_estimate = estimate_analysis_cost(len(queries), analysis_depth)
                
                st.write("üí∞ **Estimaci√≥n:**")
                st.caption(f"~{cost_estimate['estimated_tokens']} tokens")
                st.caption(f"~${cost_estimate['estimated_cost']:.4f} USD")
        
        # === OPCIONES AVANZADAS ===
        with st.expander("üî¨ Opciones Avanzadas", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                custom_focus = st.text_area(
                    "üéØ Enfoque personalizado (opcional):",
                    placeholder="Ej: Enf√≥cate en oportunidades de inversi√≥n\nAnaliza riesgos regulatorios\nCompara con competidores",
                    height=100,
                    key=f"{self._state_key_base}_custom_focus",
                    help="Instrucciones espec√≠ficas para personalizar el an√°lisis"
                )
            
            with col2:
                # Configuraciones adicionales
                include_comparisons = st.checkbox(
                    "üìà Incluir comparaciones hist√≥ricas",
                    value=True,
                    key=f"{self._state_key_base}_include_comparisons"
                )
                
                focus_on_actionable = st.checkbox(
                    "üéØ Priorizar insights accionables",
                    value=True,
                    key=f"{self._state_key_base}_focus_actionable"
                )
                
                include_risks = st.checkbox(
                    "‚ö†Ô∏è Incluir an√°lisis de riesgos",
                    value=False,
                    key=f"{self._state_key_base}_include_risks"
                )
        
        # === BOT√ìN DE AN√ÅLISIS ===
        st.write("---")
        
        # Determinar si puede analizar
        can_analyze = bool(api_key and queries and len(queries) > 0)
        
        # Mostrar estado
        if not api_key:
            st.warning("‚ö†Ô∏è Configura tu OpenAI API Key para continuar")
        elif not queries:
            st.warning("‚ö†Ô∏è No hay tecnolog√≠as para analizar")
        elif len(queries) == 0:
            st.warning("‚ö†Ô∏è La categor√≠a seleccionada est√° vac√≠a")
        else:
            st.success("‚úÖ Todo listo para el an√°lisis IA")
        
        # Bot√≥n principal
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            if st.button(
                f"üöÄ GENERAR AN√ÅLISIS IA",
                type="primary",
                disabled=not can_analyze,
                key=f"{self._state_key_base}_generate_analysis",
                use_container_width=True
            ):
                # EJECUTAR AN√ÅLISIS
                self._execute_ai_analysis(
                    api_key=api_key,
                    model=ai_model,
                    queries=queries,
                    category_name=selected_category_info["name"],
                    analysis_depth=analysis_depth,
                    custom_focus=custom_focus if custom_focus.strip() else None,
                    advanced_options={
                        "include_comparisons": include_comparisons,
                        "focus_actionable": focus_on_actionable,
                        "include_risks": include_risks
                    }
                )
        
        # === AN√ÅLISIS PREVIOS ===
        self._show_previous_ai_analyses()

    def _show_environment_status(self, env_status: Dict):
        """Muestra el estado del entorno y configuraci√≥n"""
        st.write("### üîß Estado del Entorno")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if env_status["dotenv_available"]:
                st.success("‚úÖ dotenv")
            else:
                st.error("‚ùå dotenv")
        
        with col2:
            if env_status["openai_available"]:
                st.success("‚úÖ OpenAI")
            else:
                st.error("‚ùå OpenAI")
        
        with col3:
            if env_status["api_key_in_env"]:
                st.success("‚úÖ API Key")
            else:
                st.warning("‚ö†Ô∏è Sin API Key")
        
        with col4:
            if env_status["ready"]:
                st.success("‚úÖ Listo")
            else:
                st.warning("‚ö†Ô∏è Config necesaria")
        
        # Mostrar detalles si hay problemas
        if not env_status["ready"]:
            with st.expander("üîç Detalles de Configuraci√≥n", expanded=False):
                if not env_status["dotenv_available"]:
                    st.write("‚ùå **python-dotenv no instalado**")
                    st.code("pip install python-dotenv")
                
                if not env_status["openai_available"]:
                    st.write("‚ùå **openai no instalado**")
                    st.code("pip install openai")
                
                if not env_status["api_key_in_env"]:
                    st.write("‚ùå **OPENAI_API_KEY no encontrada en .env**")
                    st.write("Crea un archivo `.env` en la ra√≠z del proyecto:")
                    st.code("OPENAI_API_KEY=sk-tu-api-key-aqui")
                
                elif not env_status["api_key_valid"]:
                    st.write("‚ùå **API Key en .env no es v√°lida**")
                    st.write("Verifica que la key sea correcta y tengas cr√©ditos disponibles")

    def _show_manual_api_configuration(self, env_status: Dict) -> Optional[str]:
        """Permite configuraci√≥n manual de API key si la autom√°tica no funciona"""
        
        if env_status["ready"]:
            return get_openai_key_from_env()
        
        st.write("### üîë Configuraci√≥n Manual de API Key")
        
        # Explicar por qu√© necesita configuraci√≥n manual
        if not env_status["api_key_in_env"]:
            st.info("üí° **Configuraci√≥n recomendada:** Agrega `OPENAI_API_KEY=tu-key` a tu archivo `.env`")
        elif not env_status["api_key_valid"]:
            st.warning("‚ö†Ô∏è La API key en .env no es v√°lida. Configura una key alternativa:")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            manual_api_key = st.text_input(
                "üîë OpenAI API Key:",
                type="password",
                help="Tu API key de OpenAI como alternativa a .env",
                key=f"{self._state_key_base}_manual_openai_key",
                placeholder="sk-..."
            )
        
        with col2:
            if manual_api_key:
                if st.button("üîç Validar", key=f"{self._state_key_base}_validate_manual_api"):
                    with st.spinner("Validando..."):
                        validation = validate_openai_key(manual_api_key)
                        
                        if validation["valid"]:
                            st.success(f"‚úÖ {validation['message']}")
                            return manual_api_key
                        else:
                            st.error(f"‚ùå {validation['message']}")
                            return None
        
        return manual_api_key if manual_api_key else None

    def _show_category_preview_for_ai(self, queries: List[Dict], category_name: str):
        """Muestra preview de los datos que se analizar√°n"""
        st.write("#### üìä Preview de Datos")
        
        if not queries:
            st.warning("No hay datos para preview")
            return
        
        # Estad√≠sticas r√°pidas
        phases = [q.get("hype_metrics", {}).get("phase", "Unknown") for q in queries]
        phase_counts = {}
        for phase in phases:
            phase_counts[phase] = phase_counts.get(phase, 0) + 1
        
        confidences = []
        mentions = []
        
        for q in queries:
            hype_metrics = q.get("hype_metrics", {})
            conf = self._safe_float_format(hype_metrics.get("confidence", 0), "float", "", "0")
            ment = self._safe_int_format(hype_metrics.get("total_mentions", 0), 0)
            
            try:
                confidences.append(float(conf))
                mentions.append(int(ment))
            except:
                continue
        
        avg_confidence = sum(confidences) / len(confidences) if confidences else 0
        total_mentions = sum(mentions) if mentions else 0
        
        # Mostrar m√©tricas
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üî¨ Tecnolog√≠as", len(queries))
            st.metric("üéØ Confianza Promedio", f"{avg_confidence:.2f}")
        
        with col2:
            st.metric("üìç Fases Representadas", len(phase_counts))
            st.metric("üìä Total Menciones", f"{total_mentions:,}")
        
        # Distribuci√≥n de fases
        if phase_counts:
            st.write("**Distribuci√≥n por Fases:**")
            for phase, count in list(phase_counts.items())[:5]:  # Limitar para UI
                percentage = (count / len(queries)) * 100
                st.write(f"‚Ä¢ {phase}: {count} ({percentage:.1f}%)")
        
        # Lista de tecnolog√≠as (primeras 5)
        with st.expander("Ver tecnolog√≠as incluidas", expanded=False):
            for i, query in enumerate(queries[:10]):  # Mostrar m√°ximo 10
                tech_name = (
                    query.get("technology_name") or 
                    query.get("search_query", "")[:40] or 
                    f"Tecnolog√≠a {i+1}"
                )
                phase = query.get("hype_metrics", {}).get("phase", "Unknown")
                st.write(f"{i+1}. **{tech_name}** - {phase}")
            
            if len(queries) > 10:
                st.write(f"... y {len(queries) - 10} tecnolog√≠as m√°s")

    def _execute_ai_analysis(self, api_key: str, model: str, queries: List[Dict], 
                        category_name: str, analysis_depth: str, custom_focus: str = None,
                        advanced_options: Dict = None):
        """Ejecuta el an√°lisis de IA y muestra resultados"""
        
        # Contenedor para el progreso
        progress_container = st.empty()
        results_container = st.container()
        
        try:
            with progress_container:
                with st.spinner(f"ü§ñ Generando an√°lisis IA de '{category_name}'..."):
                    
                    # Inicializar analizador (ahora puede usar .env autom√°ticamente)
                    from hype_ai_analyzer import HypeAIAnalyzer
                    
                    # Si api_key es None, el analizador lo cargar√° desde .env
                    analyzer = HypeAIAnalyzer(api_key=api_key, model=model)
                    
                    # Generar an√°lisis
                    result = analyzer.analyze_category_hype(
                        queries=queries,
                        category_name=category_name,
                        analysis_depth=analysis_depth,
                        custom_focus=custom_focus
                    )
            
            # Limpiar spinner
            progress_container.empty()
            
            # Mostrar resultados
            with results_container:
                if result["success"]:
                    # ‚úÖ AN√ÅLISIS EXITOSO
                    st.success("üéâ ¬°An√°lisis IA completado exitosamente!")
                    
                    # Mostrar fuente de API key
                    api_source = getattr(analyzer, 'api_key_source', 'unknown')
                    if api_source == 'environment':
                        st.info("üîë Usando API key desde archivo .env")
                    
                    # M√©tricas del an√°lisis
                    st.write("### üìä M√©tricas del An√°lisis")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("üî¨ Tecnolog√≠as", result["metadata"]["technologies_analyzed"])
                    
                    with col2:
                        st.metric("üß† Modelo", result["metadata"]["model_used"])
                    
                    with col3:
                        st.metric("‚è±Ô∏è Tiempo", f"{result['metadata']['processing_time']}s")
                    
                    with col4:
                        st.metric("üí∞ Costo", f"${result['cost']['total']:.4f}")
                    
                    # Detalles adicionales en expander
                    with st.expander("Ver detalles t√©cnicos", expanded=False):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("**Uso de Tokens:**")
                            st.write(f"‚Ä¢ Input: {result['usage']['prompt_tokens']:,}")
                            st.write(f"‚Ä¢ Output: {result['usage']['completion_tokens']:,}")
                            st.write(f"‚Ä¢ Total: {result['usage']['total_tokens']:,}")
                        
                        with col2:
                            st.write("**Desglose de Costos:**")
                            st.write(f"‚Ä¢ Input: ${result['cost']['input_cost']:.4f}")
                            st.write(f"‚Ä¢ Output: ${result['cost']['output_cost']:.4f}")
                            st.write(f"‚Ä¢ Total: ${result['cost']['total']:.4f}")
                            st.write(f"‚Ä¢ Fuente API: {api_source}")
                    
                    # === EL AN√ÅLISIS PRINCIPAL ===
                    st.write("---")
                    st.write(f"### üß† An√°lisis IA: {category_name}")
                    
                    # Mostrar el an√°lisis con formato mejorado
                    analysis_text = result["analysis"]
                    
                    # Contenedor estilizado para el an√°lisis
                    st.markdown(
                        f"""
                        <div style="
                            background-color: #f8f9fa;
                            color: #000000;
                            padding: 20px;
                            border-radius: 10px;
                            border-left: 5px solid #28a745;
                            margin: 10px 0;
                        ">
                        {analysis_text.replace(chr(10), '<br>')}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    
                    # === ACCIONES POST-AN√ÅLISIS ===
                    st.write("---")
                    st.write("### üé¨ Acciones")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        if st.button(
                            "üìÑ Exportar PDF", 
                            key=f"{self._state_key_base}_export_pdf",
                            help="Exportar an√°lisis como PDF"
                        ):
                            self._export_ai_analysis_pdf(result, category_name)
                    
                    with col2:
                        if st.button(
                            "üìã Copiar Texto", 
                            key=f"{self._state_key_base}_copy_analysis",
                            help="Mostrar texto para copiar"
                        ):
                            st.code(analysis_text, language="markdown")
                    
                    with col3:
                        if st.button(
                            "üíæ Guardar An√°lisis", 
                            key=f"{self._state_key_base}_save_analysis",
                            help="Guardar an√°lisis en historial"
                        ):
                            self._save_ai_analysis_to_history(result, category_name)
                    
                    with col4:
                        if st.button(
                            "üîÑ Nuevo An√°lisis", 
                            key=f"{self._state_key_base}_new_analysis",
                            help="Limpiar y hacer nuevo an√°lisis"
                        ):
                            # Limpiar estados y rerun
                            for key in st.session_state.keys():
                                if "ai_analysis_result" in key:
                                    del st.session_state[key]
                            st.rerun()
                    
                    # Guardar resultado en session_state para acciones posteriores
                    st.session_state[f"{self._state_key_base}_last_ai_result"] = result
                    
                else:
                    # ‚ùå ERROR EN EL AN√ÅLISIS
                    st.error("‚ùå Error durante el an√°lisis IA")
                    
                    error_msg = result.get("error", "Error desconocido")
                    st.error(f"**Error:** {error_msg}")
                    
                    # Sugerencias de soluci√≥n espec√≠ficas para configuraci√≥n .env
                    st.write("### üîß Posibles soluciones:")
                    
                    if "api" in error_msg.lower() or "key" in error_msg.lower():
                        st.write("‚Ä¢ Verifica tu archivo `.env` tiene: `OPENAI_API_KEY=sk-tu-key`")
                        st.write("‚Ä¢ Aseg√∫rate de tener cr√©ditos disponibles en OpenAI")
                        st.write("‚Ä¢ Reinicia la aplicaci√≥n despu√©s de modificar .env")
                    elif "token" in error_msg.lower():
                        st.write("‚Ä¢ Reduce el n√∫mero de tecnolog√≠as analizadas")
                        st.write("‚Ä¢ Usa un an√°lisis m√°s breve ('Ejecutivo')")
                    elif "rate" in error_msg.lower():
                        st.write("‚Ä¢ Espera unos minutos antes de volver a intentar")
                        st.write("‚Ä¢ Considera usar un modelo m√°s econ√≥mico (GPT-3.5)")
                    else:
                        st.write("‚Ä¢ Verifica tu conexi√≥n a internet")
                        st.write("‚Ä¢ Verifica que el archivo .env est√© en la ra√≠z del proyecto")
                        st.write("‚Ä¢ Intenta nuevamente en unos momentos")
                    
                    # Bot√≥n para reintentar
                    if st.button("üîÑ Reintentar An√°lisis", key=f"{self._state_key_base}_retry_analysis"):
                        st.rerun()
        
        except Exception as e:
            progress_container.empty()
            st.error(f"‚ùå Error inesperado: {str(e)}")
            
            # Ayuda espec√≠fica para problemas de configuraci√≥n
            if "No se encontr√≥ API key" in str(e):
                st.write("### üîß Configurar API Key en .env")
                st.write("1. Crea un archivo `.env` en la ra√≠z de tu proyecto")
                st.write("2. Agrega la l√≠nea: `OPENAI_API_KEY=sk-tu-api-key-aqui`")
                st.write("3. Reinicia la aplicaci√≥n Streamlit")
            
            with st.expander("Ver detalles del error"):
                st.code(str(e))

    def _show_previous_ai_analyses(self):
        """Muestra an√°lisis de IA previos guardados"""
        st.write("---")
        st.write("### üìö An√°lisis Previos")
        
        # Verificar si hay an√°lisis previos en session_state
        previous_analyses = []
        
        for key in st.session_state.keys():
            if key.startswith(f"{self._state_key_base}_saved_analysis_"):
                analysis = st.session_state[key]
                previous_analyses.append(analysis)
        
        if previous_analyses:
            # Ordenar por fecha (m√°s recientes primero)
            previous_analyses.sort(
                key=lambda x: x.get("timestamp", ""), 
                reverse=True
            )
            
            for i, analysis in enumerate(previous_analyses[:5]):  # Mostrar √∫ltimos 5
                with st.expander(
                    f"üìÑ {analysis.get('category_name', 'Sin categor√≠a')} - "
                    f"{analysis.get('timestamp', 'Sin fecha')[:16]}", 
                    expanded=False
                ):
                    # Informaci√≥n b√°sica
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.write(f"**Categor√≠a:** {analysis.get('category_name', 'N/A')}")
                        st.write(f"**Profundidad:** {analysis.get('analysis_depth', 'N/A')}")
                    
                    with col2:
                        st.write(f"**Tecnolog√≠as:** {analysis.get('technologies_analyzed', 'N/A')}")
                        st.write(f"**Modelo:** {analysis.get('model_used', 'N/A')}")
                    
                    with col3:
                        st.write(f"**Costo:** ${analysis.get('cost', 0):.4f}")
                        st.write(f"**Tokens:** {analysis.get('total_tokens', 0):,}")
                    
                    # Bot√≥n para ver an√°lisis completo
                    if st.button(f"üëÅÔ∏è Ver An√°lisis", key=f"{self._state_key_base}_view_prev_{i}"):
                        st.markdown("**An√°lisis completo:**")
                        st.markdown(analysis.get('analysis_text', 'No disponible'))
        else:
            st.info("No hay an√°lisis previos guardados. Genera tu primer an√°lisis IA arriba.")

    def _export_ai_analysis_pdf(self, result: Dict, category_name: str):
        """Exporta el an√°lisis IA como PDF"""
        try:
            # Por ahora, mostrar opci√≥n de descarga como texto
            analysis_content = f"""
    AN√ÅLISIS IA DEL HYPE CYCLE
    Categor√≠a: {category_name}
    Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M')}
    Modelo: {result['metadata']['model_used']}
    Tecnolog√≠as analizadas: {result['metadata']['technologies_analyzed']}

    {'-'*50}

    {result['analysis']}

    {'-'*50}

    M√©tricas del an√°lisis:
    - Tokens utilizados: {result['usage']['total_tokens']:,}
    - Costo del an√°lisis: ${result['cost']['total']:.4f}
    - Tiempo de procesamiento: {result['metadata']['processing_time']}s
    """
            
            st.download_button(
                label="üì• Descargar como .txt",
                data=analysis_content,
                file_name=f"hype_analysis_{category_name}_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                mime="text/plain",
                key=f"{self._state_key_base}_download_txt"
            )
            
            st.success("‚úÖ Archivo preparado para descarga")
            
        except Exception as e:
            st.error(f"Error preparando descarga: {str(e)}")

    def _save_ai_analysis_to_history(self, result: Dict, category_name: str):
        """Guarda el an√°lisis IA en el historial local"""
        try:
            # Crear entrada de historial
            history_entry = {
                "category_name": category_name,
                "analysis_text": result["analysis"],
                "timestamp": datetime.now().isoformat(),
                "analysis_depth": result["metadata"]["analysis_depth"],
                "model_used": result["metadata"]["model_used"],
                "technologies_analyzed": result["metadata"]["technologies_analyzed"],
                "cost": result["cost"]["total"],
                "total_tokens": result["usage"]["total_tokens"]
            }
            
            # Guardar en session_state
            timestamp_key = datetime.now().strftime("%Y%m%d_%H%M%S")
            history_key = f"{self._state_key_base}_saved_analysis_{timestamp_key}"
            
            st.session_state[history_key] = history_entry
            
            st.success("üíæ An√°lisis guardado en historial local")
            
        except Exception as e:
            st.error(f"Error guardando en historial: {str(e)}")